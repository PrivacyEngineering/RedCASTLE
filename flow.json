[
    {
        "id": "f679c5ec.fb0428",
        "type": "tab",
        "label": "ks-Anonymization",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ed02ca62.53a888",
        "type": "tab",
        "label": "Charging Station Emulator",
        "disabled": false,
        "info": ""
    },
    {
        "id": "44f2dba4.713184",
        "type": "tab",
        "label": "Statistics",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d43d7e62.0ae71",
        "type": "tab",
        "label": "Filtering",
        "disabled": false,
        "info": ""
    },
    {
        "id": "60da4e27.9e901",
        "type": "tab",
        "label": "Dashboard entrypoint",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2bd5e7f7.0b5858",
        "type": "subflow",
        "name": "Conditional Changes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 280,
                "wires": [
                    {
                        "id": "faddfcbc.ef93f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 280,
                "wires": [
                    {
                        "id": "faddfcbc.ef93f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "60904c4d.0104c4",
        "type": "subflow",
        "name": "Conditional Filter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 160,
                "wires": [
                    {
                        "id": "6f6c2af1.9f6e64"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 160,
                "wires": [
                    {
                        "id": "6f6c2af1.9f6e64",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "19a47153.1035df",
        "type": "subflow",
        "name": "Suppress Properties",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 300,
                "wires": [
                    {
                        "id": "f960e58b.28ccf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 300,
                "wires": [
                    {
                        "id": "f960e58b.28ccf8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "aaf1335a.c3997",
        "type": "subflow",
        "name": "RedCASTLE",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 640,
                "y": 400,
                "wires": [
                    {
                        "id": "8b908c57.5c8ff"
                    },
                    {
                        "id": "39c42862abf1c7ac"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2140,
                "y": 220,
                "wires": [
                    {
                        "id": "77f16291.d802ac",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2140,
                "y": 400,
                "wires": [
                    {
                        "id": "917f0236.1816e",
                        "port": 1
                    },
                    {
                        "id": "917f0236.1816e",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 2200,
            "y": 900,
            "wires": [
                {
                    "id": "889655ce.1af3a8",
                    "port": 0
                },
                {
                    "id": "eecbab44.fe2358",
                    "port": 0
                },
                {
                    "id": "de6eb866.fbcb78",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e18cf721.789868",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "generate car owner persona list",
        "style": {
            "label": true
        },
        "nodes": [
            "9aa878b2.7e4fc8"
        ],
        "x": 514,
        "y": 699,
        "w": 252,
        "h": 82
    },
    {
        "id": "cd180a4c.27e908",
        "type": "group",
        "z": "60904c4d.0104c4",
        "name": "Filter",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6f6c2af1.9f6e64"
        ],
        "x": 254,
        "y": 119
    },
    {
        "id": "b1ae5997.ec6898",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "Change car price class",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "2d317e08.e1f652",
            "42403d84.0c7cd4"
        ],
        "x": 1154,
        "y": 879,
        "w": 732,
        "h": 82
    },
    {
        "id": "8f7d71c7.eca34",
        "type": "group",
        "z": "2bd5e7f7.0b5858",
        "name": "Change",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "faddfcbc.ef93f"
        ],
        "x": 714,
        "y": 239
    },
    {
        "id": "75d75513.333d1c",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "Change car prices",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "36a1d79b.ecb2c8",
            "4439c462.3a2c8c"
        ],
        "x": 1174,
        "y": 699,
        "w": 682,
        "h": 82
    },
    {
        "id": "e68402fe.4fdb1",
        "type": "group",
        "z": "19a47153.1035df",
        "name": "Reduce",
        "style": {
            "label": true,
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "color": "#ffffff"
        },
        "nodes": [
            "f960e58b.28ccf8",
            "3fd6dcd1.eb1a14"
        ],
        "x": 214,
        "y": 219
    },
    {
        "id": "7c1a5935.6513c8",
        "type": "group",
        "z": "f679c5ec.fb0428",
        "name": "write to static file",
        "style": {
            "label": true
        },
        "nodes": [
            "eb697a48.ed8c28",
            "85605a5e.e5e3b8"
        ],
        "x": 2334,
        "y": 839,
        "w": 412,
        "h": 82
    },
    {
        "id": "261b9b5a.56f684",
        "type": "mqtt-broker",
        "name": "fog_emulator_broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a1625557.3ff658",
        "type": "ui_group",
        "name": "Standard",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "144804ba.ddd68b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b23cfab0.cda678",
        "type": "ui_tab",
        "name": "Test Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "18d0f143.d267bf",
        "type": "ui_group",
        "name": "Test UI",
        "tab": "b23cfab0.cda678",
        "order": 1,
        "disp": false,
        "width": 17,
        "collapse": false
    },
    {
        "id": "fd975b9c.a00f58",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "b23cfab0.cda678",
        "order": 2,
        "disp": true,
        "width": 19
    },
    {
        "id": "3956295b.f852b6",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "f54dfbe6.fa7908",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f54dfbe6.fa7908",
        "type": "ui_tab",
        "name": "Others",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6d3f056b.e24a2c",
        "type": "mqtt-broker",
        "name": "mosca",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "8d767608.3873e8",
        "type": "mqtt-broker",
        "name": "cloud broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b61e65dd.8c1408",
        "type": "inject",
        "z": "f679c5ec.fb0428",
        "name": "manual start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "e846aeff.2c3b3",
                "5864379a.27cfd8",
                "e559349b.fc7138"
            ]
        ]
    },
    {
        "id": "37891673.84bf2a",
        "type": "csv",
        "z": "ed02ca62.53a888",
        "name": "convert csv to object stream",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 840,
        "wires": [
            [
                "e4a7462b.53c9e8"
            ]
        ]
    },
    {
        "id": "49c088f6.9ba0c8",
        "type": "file in",
        "z": "ed02ca62.53a888",
        "name": "load file example csv",
        "filename": "Electric_Vehicle_Charging_Station_Energy_Consumption (1).csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 160,
        "y": 840,
        "wires": [
            [
                "37891673.84bf2a"
            ]
        ]
    },
    {
        "id": "abe891b5.42669",
        "type": "inject",
        "z": "ed02ca62.53a888",
        "name": "manual emulation start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "49c088f6.9ba0c8",
                "d8931186.f646c"
            ]
        ]
    },
    {
        "id": "9aa878b2.7e4fc8",
        "type": "function",
        "z": "ed02ca62.53a888",
        "g": "e18cf721.789868",
        "name": "generate car owners",
        "func": "if(flow.get(\"owner_data\") !== undefined) {\n    return msg;\n}\n\ncustomer_list = Array();\ncars_brands_and_modells = [\n    [\"Audi\", \"e-tron 55\", \"e-tron 50\"],\n    [\"BMW\", \"i3\"],\n    [\"Ford\", \"Focus Electric\", \"Mustang Mach-E\", \"Ford F-150 Lightning electric pickup\"],\n    [\"Hyundai\", \"Ioniq Electric\", \"Kona Electric\"],\n    [\"Jaguar\", \"I-Pace\"],\n    [\"Mercedes-Benz\", \"B-Class Electric Drive\", \"EQC\"],\n    [\"Peugeot\", \"Peugeot iOn\", \"e208\", \"e2008\"],\n    [\"Renault\", \"Fluence Z.E.\", \"SM3 Z.E.\", \"Zoe\", \"Twizy\", \"Kangoo Z.E.\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Volkswagen\", \"e-up!\", \"ID.4\", \"ID.3\"]\n];\n    \nnode.log(\"Start generating car owners\");   \nfor (i = 0; i < 100; i++) {\n\n    car_brand_index = Math.floor(Math.random()*cars_brands_and_modells.length);\n    car_modell_index = Math.floor(Math.random() * (cars_brands_and_modells[car_brand_index].length-1)) + 1\n    \n    cusomterObject = new Object();\n    cusomterObject.customer_id = 1000+i\n    \n    cusomterObject.allow_dynamic_charging = Math.random() < 0.5;\n    cusomterObject.car_brand = cars_brands_and_modells[car_brand_index][0]\n    cusomterObject.car_modell = cars_brands_and_modells[car_brand_index][car_modell_index]\n    var newMsg = cusomterObject;\n    customer_list.push(newMsg);\n    //node.log(\"Test\");\n}\nflow.set(\"owner_data\", customer_list);\nnode.log(\"Finished generating car owners\");   \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 740,
        "wires": [
            [
                "cb546c79.86a36"
            ]
        ]
    },
    {
        "id": "cb546c79.86a36",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "assign car owner from flow.owner_data to each charge position",
        "func": "\n\nowner_data = flow.get('owner_data')\nif (owner_data.length <= 0) {\n    node.error(\"owner_data list not set!\");\n}\n\n\n\nowner = owner_data[Math.floor(Math.random()*owner_data.length)]\nfor (var attrname in owner) \n{ \n    msg.payload[attrname] = owner[attrname]; \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "36a1d79b.ecb2c8"
            ]
        ]
    },
    {
        "id": "afcb8dcd.5148c",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "discernibility_metric",
        "func": "metric = 0;\nk = msg.payload.k;\n//quasi_identifiers = msg.payload.quasi_identifiers;\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\n//node.warn({\"dataframe\": dataframe});\n//node.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\n\n\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n\nfor (var value of new Set(dataframe_t[equivalenceClassColumnIndex].slice(1))){\n    counter = 0;\n    for (var entry of dataframe_t[equivalenceClassColumnIndex].slice(1)) {\n        \n        if(entry == value) {\n            counter++;\n        }\n    }\n    \n    eq_class_size = counter;\n    //node.warn({\"eq_class_size\": eq_class_size, \"msg\":msg});\n    if (eq_class_size >= k){\n        metric += Math.pow(eq_class_size, 2)\n    }\n    else {\n        metric += dataframe.length * eq_class_size\n    }\n}\n\n//msg.payload.discernibilityMetric = metric;\n\nreturn {payload: {\"discernibilityMetric\" : metric}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 740,
        "wires": [
            [
                "b69cba0d.89a368",
                "7a559f8c.3b417"
            ]
        ]
    },
    {
        "id": "a9c0de1.34c292",
        "type": "inject",
        "z": "44f2dba4.713184",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\t    \"Nachricht\": \"Test\", \t    \"equivalenceClassColumn\":\"equivalenceClass\",\t    \"equivalenceClassColumnIndex\": 3,\t    \"k\": 3,\t    \"quasiIdentifiers\": [\"job\", \"age\", \"pin\"]\t}",
        "payloadType": "jsonata",
        "x": 730,
        "y": 820,
        "wires": [
            [
                "940cf07b.c7c35"
            ]
        ]
    },
    {
        "id": "b69cba0d.89a368",
        "type": "debug",
        "z": "44f2dba4.713184",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 900,
        "wires": []
    },
    {
        "id": "940cf07b.c7c35",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "categorize columns",
        "func": "dataframe = msg.payload.dataframe;\ncolumnNames = msg.payload.columnNames;\n\ncolumnNames = [\"City\", \"State_Province\", \"Zip_Postal_Code\", \"Start_Time_Zone\", \"End_Time_Zone\", \"Total_Duration__hh_mm_ss_\", \"Charging_Time__hh_mm_ss_\", \"Energy__kWh_\", \"GHG_Savings__kg_\", \"Gasoline_Savings__gallons_\", \"Port_Type\", \"car_price_alt\", \"min_car_price\", \"spc_car_price\", \"max_car_price\", \"min_car_brand\", \"spc_car_brand\", \"max_car_brand\", \"min_car_modell\", \"spc_car_modell\", \"max_car_modell\", \"min_Start_Date___Time\", \"spc_Start_Date___Time\", \"max_Start_Date___Time\", \"min_End_Date___Time\", \"spc_End_Date___Time\", \"max_End_Date___Time\", \"min_Address\", \"spc_Address\", \"max_Address\", \"min_Station_Name\", \"spc_Station_Name\", \"max_Station_Name\", \"min_customer_id\", \"spc_customer_id\", \"max_customer_id\", \"min_allow_dynamic_charging\", \"spc_allow_dynamic_charging\", \"max_allow_dynamic_charging\", \"createdAt\", \"outputAt\", \"delay\", \"cluster\"]\n/*\ncolumnNames = [\"job\", \"age\", \"pin\"]\n\ndataframe = [\n    [\"job\", \"age\", \"pin\", \"equivalenceClass\"],\n    [1, 49, 132042, 1],\n    [2, 40, 132021, 0], \n    [3, 44, 132024, 0], \n    [4, 48, 132046, 1],\n    [5, 45, 132045, 1],\n    [6, 43, 132027, 0],\n    ];\n*/\n\ndataframeUniqueSet = [];\n\n\ndataframe_t = dataframe;\n\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n\ncategorizedDataframe_t = dataframe_t.map(function(arr) {return arr.slice();});\n\nnode.warn({\"dataframe_t = \": dataframe_t, \"msg\":msg});\nnode.warn({\"dataframe = \": dataframe, \"msg\":msg});\n\ndataframeSet = []\n\nfor (var row = 0; row < dataframe_t.length; row++) {\n    if (columnNames.includes(dataframe_t[row][0])) {\n        // create set to keep only unique entries\n        // slice because the first one is the name\n        dataframeUniqueSet[row] = new Set(dataframe_t[row].slice(1))\n        \n        // set categories based on the unique values\n        // skip first col as it is the name\n        for (var col = 1; col < dataframe_t[row].length; col++) {\n            dataframeRowUniqueArray = Array.from(dataframeUniqueSet[row]);\n            categorizedDataframe_t[row][col] = (dataframeRowUniqueArray.indexOf(dataframe_t[row][col])) + 1;\n        }\n    }\n}\n\nnode.warn({\"categorizedDataframe_t\": dataframe, \"msg\":msg});\nnode.warn({\"dataframe_t\": dataframe_t, \"msg\":msg});\n\n\ncategorizedDataframe = categorizedDataframe_t[0].map((_, colIndex) => categorizedDataframe_t.map(row => row[colIndex]));\n\n//msg.payload.categorizedDataframe = dataframe;\nmsg.payload.categorizedDataframe = categorizedDataframe;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 800,
        "wires": [
            [
                "8a307ca1.e69e3",
                "5db08302.ab82ac",
                "afcb8dcd.5148c"
            ]
        ]
    },
    {
        "id": "5db08302.ab82ac",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "average_class_size",
        "func": "k = msg.payload.k;\n//quasi_identifiers = msg.payload.quasi_identifiers;\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\n//node.warn({\"dataframe\": dataframe});\n//node.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\n\n// get the index of the equivalenc class column\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\n\n// transpose matrix for easier access\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n// get number of unique equivalenceclasses and calculate with them \n// slice because first entry is name\naverageClassSize = (dataframe.length-1) / (new Set(dataframe_t[equivalenceClassColumnIndex].slice(1)).size * k)\n\n\n//node.warn(new Set(dataframe_t[equivalenceClassColumnIndex].slice(1)).size * k)\n\nmsg = {payload: {}};\nmsg.payload.averageClassSize = averageClassSize;\n\nreturn {payload: {\"averageClassSize\" : averageClassSize}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 800,
        "wires": [
            [
                "b69cba0d.89a368",
                "6886c066.77c5a"
            ]
        ]
    },
    {
        "id": "8a307ca1.e69e3",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "generalized_information_loss",
        "func": "k = msg.payload.k;\nquasiIdentifiers = msg.payload.quasiIdentifiers;\n\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\n/*\nnode.warn({\"msg\": msg});\nnode.warn({\"dataframe\": dataframe});\nnode.warn({\"quasiIdentifiers\": quasiIdentifiers});\nnode.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\nnode.warn({\"equivalenceClassColumnIndex\": equivalenceClassColumnIndex});\n*/\n\nlet uij = 0;\nlet lij = 1;\nlet ui = 0;\nlet li = 1;\nlet informationLoss = 0\n\n// get the min and max values per categorie. Skip the first as its the name in the transposed array.\nfor (let i = 1; i < dataframe.length; i++) {\n    for (let key = 0; key < quasiIdentifiers.length; key++) {\n        const category = dataframe[i][equivalenceClassColumnIndex];\n        const filtered_array = dataframe.filter((value) => value[equivalenceClassColumnIndex] === category).map((value => value[key]));\n        uij = Math.max.apply(Math, filtered_array);\n        lij = Math.min.apply(Math, filtered_array);\n        //node.warn({\"uij\": uij});\n        //node.warn({\"uij\": uij});\n        const filtered_general_array = dataframe.slice(1).map(value => value[key]);\n        //node.warn({\"filtered_general_array\": filtered_general_array});\n        ui = Math.max.apply(Math, filtered_general_array);\n        //node.warn({\"ui\": ui});\n        li = Math.min.apply(Math, filtered_general_array);\n        //node.warn({\"li\": li});\n        informationLoss = informationLoss + ((uij - lij) / (ui - li))\n        //node.warn({\"(uij - lij)\": (uij - lij)});\n        //node.warn({\"(ui - li)\": (ui - li)});\n        //node.warn({\"informationLoss\": informationLoss});\n    }\n}\nlet factor = 1 / (quasiIdentifiers.length * dataframe.slice(1).length)\nlet result = factor * informationLoss\nmetric = result\n\n//node.warn({\"informationLoss\": informationLoss});\n//node.warn({\"generalized_information_loss\": result});\n\nreturn {payload: {\"informationLoss\" : informationLoss, \"generalized_information_loss\" : result}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 860,
        "wires": [
            [
                "b69cba0d.89a368",
                "86e79b19.646ae8",
                "1aa6bc6e.6b2004"
            ]
        ]
    },
    {
        "id": "f960e58b.28ccf8",
        "type": "function",
        "z": "19a47153.1035df",
        "g": "e68402fe.4fdb1",
        "name": "remove disallowed columns / properties from messages",
        "func": "for (var [id, blacklistedProperty] of Object.entries(msg.suppressed_properties.suppressed_properties)) {\n    delete msg.payload[blacklistedProperty];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3fd6dcd1.eb1a14",
        "type": "comment",
        "z": "19a47153.1035df",
        "g": "e68402fe.4fdb1",
        "name": "Send json with array msg payload property \"disallowed_columns\" to the \"set flow variable\" node or modifie the previous node accordingly",
        "info": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "6f6c2af1.9f6e64",
        "type": "function",
        "z": "60904c4d.0104c4",
        "g": "cd180a4c.27e908",
        "name": "apply filterCondtion",
        "func": "filterCondition = msg.filterCondition;\n\nvar isInFilterCounter = 0;\nfor (var prop in filterCondition) {\n    var currentFilter = filterCondition[prop]\n    if(prop === \"rangeFilter\") {\n        if( msg.payload[currentFilter.columnName] >= currentFilter.minValue && msg.payload[currentFilter.columnName] <= currentFilter.maxValue) {\n            isInFilterCounter += 1;\n        }\n    }\n    if (prop === \"whitelistFilter\") {\n        if(currentFilter.whitelistValues.includes(msg.payload[currentFilter.columnName])) {\n            isInFilterCounter += 1;\n        }\n    }\n    if (prop === \"blacklistFilter\") {\n        if(!currentFilter.blacklistValues.includes(msg.payload[currentFilter.columnName])) {\n            isInFilterCounter += 1;\n        }\n    }\n}\n\n\nif (isInFilterCounter == Object.keys(filterCondition).length) {\n    return msg;\n}\nelse {\n    return;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "36a1d79b.ecb2c8",
        "type": "change",
        "z": "ed02ca62.53a888",
        "g": "75d75513.333d1c",
        "name": "append changeConditions to message",
        "rules": [
            {
                "t": "set",
                "p": "changeConditions",
                "pt": "msg",
                "to": "{\"changeStringEqual\":{\"sourceAttributeName\":\"car_modell\",\"changeAttributeName\":\"car_price\",\"change\":[{\"conditionStringEqual\":\"e-tron 55\",\"valueForChangeAttributeName\":84459},{\"conditionStringEqual\":\"e-tron 50\",\"valueForChangeAttributeName\":69100},{\"conditionStringEqual\":\"i3\",\"valueForChangeAttributeName\":39000},{\"conditionStringEqual\":\"Focus Electric\",\"valueForChangeAttributeName\":34900},{\"conditionStringEqual\":\"Mustang Mach-E\",\"valueForChangeAttributeName\":46900},{\"conditionStringEqual\":\"Ford F-150 Lightning electric pickup\",\"valueForChangeAttributeName\":43400},{\"conditionStringEqual\":\"Ioniq Electric\",\"valueForChangeAttributeName\":32363},{\"conditionStringEqual\":\"Kona Electric\",\"valueForChangeAttributeName\":41850},{\"conditionStringEqual\":\"I-Pace\",\"valueForChangeAttributeName\":77300},{\"conditionStringEqual\":\"B-Class Electric Drive\",\"valueForChangeAttributeName\":39151},{\"conditionStringEqual\":\"EQC\",\"valueForChangeAttributeName\":66068},{\"conditionStringEqual\":\"Peugeot iOn\",\"valueForChangeAttributeName\":21800},{\"conditionStringEqual\":\"e208\",\"valueForChangeAttributeName\":29682},{\"conditionStringEqual\":\"e2008\",\"valueForChangeAttributeName\":35250},{\"conditionStringEqual\":\"Fluence Z.E.\",\"valueForChangeAttributeName\":25690},{\"conditionStringEqual\":\"SM3 Z.E.\",\"valueForChangeAttributeName\":32000},{\"conditionStringEqual\":\"Zoe\",\"valueForChangeAttributeName\":29990},{\"conditionStringEqual\":\"Twizy\",\"valueForChangeAttributeName\":6950},{\"conditionStringEqual\":\"Kangoo Z.E.\",\"valueForChangeAttributeName\":20820},{\"conditionStringEqual\":\"Model S\",\"valueForChangeAttributeName\":86990},{\"conditionStringEqual\":\"Model X\",\"valueForChangeAttributeName\":95990},{\"conditionStringEqual\":\"Model 3\",\"valueForChangeAttributeName\":43560},{\"conditionStringEqual\":\"Model Y\",\"valueForChangeAttributeName\":58620},{\"conditionStringEqual\":\"e-up!\",\"valueForChangeAttributeName\":21421},{\"conditionStringEqual\":\"ID.4\",\"valueForChangeAttributeName\":37415},{\"conditionStringEqual\":\"ID.3\",\"valueForChangeAttributeName\":31960}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 740,
        "wires": [
            [
                "4439c462.3a2c8c"
            ]
        ]
    },
    {
        "id": "eb697a48.ed8c28",
        "type": "csv",
        "z": "f679c5ec.fb0428",
        "g": "7c1a5935.6513c8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2410,
        "y": 880,
        "wires": [
            [
                "85605a5e.e5e3b8"
            ]
        ]
    },
    {
        "id": "85605a5e.e5e3b8",
        "type": "file",
        "z": "f679c5ec.fb0428",
        "g": "7c1a5935.6513c8",
        "name": "",
        "filename": "anonymized_tuples.csv",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2610,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "7a11bd0a.384864",
        "type": "ui_button",
        "z": "60da4e27.9e901",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Simulation and Castleguard",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 600,
        "wires": [
            [
                "750a44e0.0e6acc"
            ]
        ]
    },
    {
        "id": "750a44e0.0e6acc",
        "type": "link out",
        "z": "60da4e27.9e901",
        "name": "",
        "links": [
            "e8dbc9d1.defd58",
            "f916c6f6.ace1e8"
        ],
        "x": 775,
        "y": 600,
        "wires": []
    },
    {
        "id": "e8dbc9d1.defd58",
        "type": "link in",
        "z": "f679c5ec.fb0428",
        "name": "",
        "links": [
            "750a44e0.0e6acc"
        ],
        "x": 275,
        "y": 1440,
        "wires": [
            [
                "e846aeff.2c3b3",
                "5864379a.27cfd8"
            ]
        ]
    },
    {
        "id": "f916c6f6.ace1e8",
        "type": "link in",
        "z": "ed02ca62.53a888",
        "name": "",
        "links": [
            "750a44e0.0e6acc"
        ],
        "x": 95,
        "y": 960,
        "wires": [
            [
                "49c088f6.9ba0c8"
            ]
        ]
    },
    {
        "id": "2d317e08.e1f652",
        "type": "change",
        "z": "ed02ca62.53a888",
        "g": "b1ae5997.ec6898",
        "name": "append changeConditions to message",
        "rules": [
            {
                "t": "set",
                "p": "changeConditions",
                "pt": "msg",
                "to": "{\"changeRangeBased\":{\"sourceAttributeName\":\"car_price\",\"changeAttributeName\":\"car_price_alt\",\"change\":[{\"conditionMin\":40000,\"conditionMax\":120000,\"valueForChangeAttributeName\":\"expensive\"},{\"conditionMin\":0,\"conditionMax\":39999,\"valueForChangeAttributeName\":\"cheap\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 920,
        "wires": [
            [
                "42403d84.0c7cd4"
            ]
        ]
    },
    {
        "id": "faddfcbc.ef93f",
        "type": "function",
        "z": "2bd5e7f7.0b5858",
        "g": "8f7d71c7.eca34",
        "name": "apply change conditions",
        "func": "changeCondition = msg.changeConditions;\n\n\n//node.warn({\"changeCondition\": changeCondition})\n\n\n \nfor (var currentChangeConditionType in changeCondition) {\n    \n    //node.warn({\"currentChangeConditionType\": currentChangeConditionType});\n    //node.warn({\"currentChangeConditionType == 'changeStringEqual'\": currentChangeConditionType == \"changeStringEqual\"});\n    //node.warn({\"currentChangeConditionType == 'changeRangeBased'\": currentChangeConditionType == \"changeRangeBased\"});\n    //node.warn({\"changeCondition[currentChangeConditionType]\": changeCondition[currentChangeConditionType]});\n    \n    for (var change of changeCondition[currentChangeConditionType].change) {\n        currentChangeCondition = changeCondition[currentChangeConditionType]\n        if(currentChangeConditionType == \"changeStringEqual\") {\n            // node.warn({\"change.conditionStringEqual\": change.conditionStringEqual});\n            // node.warn({\"msg.payload[currentChangeCondition.sourceAttributeName]\": msg.payload[currentChangeCondition.sourceAttributeName]});\n            if(msg.payload[currentChangeCondition.sourceAttributeName] == change.conditionStringEqual) {\n                msg.payload[currentChangeCondition.changeAttributeName] = change.valueForChangeAttributeName;\n                //node.warn({\"change made\": change})\n                //node.warn(msg.payload)\n                break;\n            }\n        }\n        if(currentChangeConditionType == \"changeRangeBased\") {\n            if(msg.payload[currentChangeCondition.sourceAttributeName] > change.conditionMin && \n               msg.payload[currentChangeCondition.sourceAttributeName] <= change.conditionMax) {\n                msg.payload[currentChangeCondition.changeAttributeName] = change.valueForChangeAttributeName;\n                //node.warn({\"change made\": change})\n                //node.warn(msg.payload)\n                break;\n            }\n        }\n    }\n} \n\nreturn msg;\n\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4439c462.3a2c8c",
        "type": "subflow:2bd5e7f7.0b5858",
        "z": "ed02ca62.53a888",
        "g": "75d75513.333d1c",
        "name": "change car prices based on car models ",
        "env": [],
        "x": 1670,
        "y": 740,
        "wires": [
            [
                "2d317e08.e1f652"
            ]
        ]
    },
    {
        "id": "42403d84.0c7cd4",
        "type": "subflow:2bd5e7f7.0b5858",
        "z": "ed02ca62.53a888",
        "g": "b1ae5997.ec6898",
        "name": "change car price class based on car price range",
        "env": [],
        "x": 1680,
        "y": 920,
        "wires": [
            [
                "a26554d9.b78e68"
            ]
        ]
    },
    {
        "id": "a56b7842.8c1e28",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "add benchmark timestamp",
        "rules": [
            {
                "t": "set",
                "p": "timestampNodeRedReturnFromCastleguard",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1820,
        "y": 900,
        "wires": [
            [
                "d7b2e912.c80db8",
                "9e3ea463.cad528"
            ]
        ]
    },
    {
        "id": "eb1c3b1e.bfd068",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.timestampNodeRedBeforeSendAsSimulatedStation",
                "pt": "msg",
                "to": "timestampNodeRedBeforeSendAsSimulatedStation",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 900,
        "wires": [
            [
                "a56b7842.8c1e28"
            ]
        ]
    },
    {
        "id": "9bb30ca2.d1f6f",
        "type": "switch",
        "z": "ed02ca62.53a888",
        "name": "",
        "property": "payload.End_Date___Time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "null"
            },
            {
                "t": "head",
                "v": "4000",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 550,
        "y": 980,
        "wires": [
            [
                "226d3241.e3a83e"
            ],
            [
                "226d3241.e3a83e"
            ],
            [
                "9aa878b2.7e4fc8"
            ],
            [
                "9aa878b2.7e4fc8"
            ]
        ]
    },
    {
        "id": "226d3241.e3a83e",
        "type": "debug",
        "z": "ed02ca62.53a888",
        "name": "catch malformed data entries",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 920,
        "wires": []
    },
    {
        "id": "64b2736e.6b7d1c",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "set firstMessageTimestamp",
        "rules": [
            {
                "t": "set",
                "p": "firstMessageTimestamp",
                "pt": "global",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "eca54672.498798",
        "type": "switch",
        "z": "f679c5ec.fb0428",
        "name": "firstMessage",
        "property": "firstMessageTimestamp",
        "propertyType": "global",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 970,
        "y": 960,
        "wires": [
            [
                "64b2736e.6b7d1c"
            ],
            [
                "64b2736e.6b7d1c"
            ],
            []
        ]
    },
    {
        "id": "58d0766e.52cdd8",
        "type": "csv",
        "z": "44f2dba4.713184",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 640,
        "y": 380,
        "wires": [
            [
                "1380d3cd.7c0fcc",
                "aab90020.7eb4e"
            ]
        ]
    },
    {
        "id": "99ce3d72.e613e",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "transform to 2d array",
        "func": "\nvar attributes = [];\nvar values = []\n\narray2d = flow.get(\"array2d\");\n\nfor (var attribute in msg.payload) { \n    attributes.push(attribute);\n    values.push(msg.payload[attribute])\n}\n\n//node.warn({\"array2d\": array2d})\n\nif(flow.get(\"array2d\") === undefined) {\n    array2d = new Array(attributes);\n    flow.set(\"array2d\", array2d)\n}\n\narray2d.push(values);\nflow.set(\"array2d\", array2d)\n//node.warn({\"array2d\": array2d})\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 380,
        "wires": [
            [
                "b4bcc326.6ac6d"
            ]
        ]
    },
    {
        "id": "1bebbd99.356a92",
        "type": "file in",
        "z": "44f2dba4.713184",
        "name": "anonymized_tuples.csv",
        "filename": "anonymized_tuples.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 430,
        "y": 380,
        "wires": [
            [
                "58d0766e.52cdd8"
            ]
        ]
    },
    {
        "id": "1c171155.0df8df",
        "type": "inject",
        "z": "44f2dba4.713184",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "1bebbd99.356a92",
                "c4533ca5.75f37"
            ]
        ]
    },
    {
        "id": "c4533ca5.75f37",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "array2d",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c66fdcab.5b319",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.dataframe",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.equivalenceClassColumn",
                "pt": "msg",
                "to": "cluster",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.quasiIdentifiers",
                "pt": "msg",
                "to": "[\"min_car_price\",\"spc_car_price\",\"max_car_price\",\"min_car_brand\",\"spc_car_brand\",\"max_car_brand\",\"min_car_modell\",\"spc_car_modell\",\"max_car_modell\",\"min_Address\",\"spc_Address\",\"max_Address\",\"min_Station_Name\",\"spc_Station_Name\",\"max_Station_Name\",\"min_customer_id\",\"spc_customer_id\",\"max_customer_id\",\"min_allow_dynamic_charging\",\"spc_allow_dynamic_charging\",\"max_allow_dynamic_charging\"]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.k",
                "pt": "msg",
                "to": "5",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 740,
        "wires": [
            [
                "940cf07b.c7c35"
            ]
        ]
    },
    {
        "id": "d7b2e912.c80db8",
        "type": "link out",
        "z": "f679c5ec.fb0428",
        "name": "statistics",
        "links": [
            "dc19c14f.d56c2"
        ],
        "x": 2035,
        "y": 940,
        "wires": []
    },
    {
        "id": "dc19c14f.d56c2",
        "type": "link in",
        "z": "44f2dba4.713184",
        "name": "",
        "links": [
            "d7b2e912.c80db8"
        ],
        "x": 215,
        "y": 1260,
        "wires": [
            [
                "e7cfa66b.1d91d8",
                "a418eb4b.8f8618",
                "49fb3a5c.21da44",
                "4f4b04bd.8d0cfc"
            ]
        ]
    },
    {
        "id": "c05609dc.5466e8",
        "type": "ui_chart",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "CASTLEGUARD Delay in seconds",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "6000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2680,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "a418eb4b.8f8618",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.delay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1220,
        "wires": [
            [
                "fa2f67c2.b3b2e8",
                "d2612e9c.552f7"
            ]
        ]
    },
    {
        "id": "49fb3a5c.21da44",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.cluster",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "6e0a5908.65f388",
                "c500f150.6e3c3"
            ]
        ]
    },
    {
        "id": "6e0a5908.65f388",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "count messages",
        "func": "if(flow.get('messageCounter') === undefined) {\n    flow.set('messageCounter', 1);\n}\nmessageCounter = flow.get('messageCounter')\nflow.set('messageCounter', messageCounter + 1);\n\nreturn {payload: flow.get('messageCounter')}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1280,
        "wires": [
            [
                "cfcf2562.0d6dd8",
                "f096e5bc.cd6498",
                "13556012dbeb296d"
            ]
        ]
    },
    {
        "id": "313004a.c1cedfc",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "generated output",
        "format": "{{msg.payload.messageCounter}}",
        "layout": "row-spread",
        "x": 2630,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c500f150.6e3c3",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "count cluster",
        "func": "clusterCounterSet = flow.get('clusterCounterSet') || new Set()\n\nclusterCounterSet.add(msg.payload);\n\nflow.set('clusterCounterSet', clusterCounterSet)\n\nreturn {payload: clusterCounterSet.size};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1420,
        "wires": [
            [
                "28f46a34.3c2f76"
            ]
        ]
    },
    {
        "id": "de796a30.f776b8",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "generated clusters",
        "format": "{{msg.payload.clusterCount}}",
        "layout": "row-spread",
        "x": 2630,
        "y": 1520,
        "wires": []
    },
    {
        "id": "fa2f67c2.b3b2e8",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "calc max delay",
        "func": "maxDelay = flow.get('maxDelay') || 0\n\nif( maxDelay < msg.payload) {\n    flow.set('maxDelay', msg.payload)\n    return {payload: msg.payload};\n}\nelse {\n    return {payload: maxDelay};\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1140,
        "wires": [
            [
                "54b90938.6c79b8"
            ]
        ]
    },
    {
        "id": "c85f43d8.4a593",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "max CASTELGUARD delay",
        "format": "{{msg.payload.maxRedCastleDelay}}",
        "layout": "row-spread",
        "x": 2660,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1a123c51.a9f044",
        "type": "ui_chart",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Node-Red Delay in seconds",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "6000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2660,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "e7cfa66b.1d91d8",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "calc node-red delay",
        "func": "outTime = new Date(msg.timestampNodeRedBeforeSendAsSimulatedStation);\ninTime = new Date(msg.timestampNodeRedReturnFromCastleguard);\ndelay = (Math.abs(inTime - outTime)) / 1000;\nreturn {payload: delay};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1080,
        "wires": [
            [
                "b4c55a92.7cb798",
                "55d841d2.560a8"
            ]
        ]
    },
    {
        "id": "b4c55a92.7cb798",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "calc max node-red delay",
        "func": "maxDelay = flow.get('maxNodeRedDelay') || 0\n\nif( maxDelay < msg.payload) {\n    flow.set('maxNodeRedDelay', msg.payload)\n    return {payload: msg.payload};\n}\nelse {\n    return {payload: maxDelay}\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "c5e646c1.299ca8"
            ]
        ]
    },
    {
        "id": "21f4a4e6.daeebc",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "max Node-Red delay",
        "format": "{{msg.payload.maxNodeRedDelay}}",
        "layout": "row-spread",
        "x": 2640,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5f7d7006.d75ed",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "calc delay between node-red and castleguard",
        "func": "\nreturn {payload: Math.abs(flow.get('maxNodeRedDelay') - flow.get('maxDelay'))};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1180,
        "wires": [
            [
                "94789d7f.c9105"
            ]
        ]
    },
    {
        "id": "8133623b.5b86",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "fd975b9c.a00f58",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Node-Red <--> Castlegurad Overhead in seconds",
        "format": "{{msg.payload.differenceNodeRedDelayAndRedCasteDelay}}",
        "layout": "row-spread",
        "x": 2730,
        "y": 1620,
        "wires": []
    },
    {
        "id": "5ae6ad09.f6b9b4",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "messages per second",
        "format": "{{msg.payload.messagesPerSecond}}",
        "layout": "row-spread",
        "x": 2650,
        "y": 1400,
        "wires": []
    },
    {
        "id": "afad0c4b.df2b9",
        "type": "ui_chart",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 5,
        "width": 17,
        "height": 5,
        "label": "messages per second",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "6000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2640,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "cfcf2562.0d6dd8",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "calc message queue",
        "func": "\n//node.warn(global.get(\"numberSendedMessages\"));\nreturn {payload: global.get(\"numberSendedMessages\") - msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1380,
        "wires": [
            [
                "55d4b970.66b778"
            ]
        ]
    },
    {
        "id": "deea057d.314e98",
        "type": "ui_chart",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "fd975b9c.a00f58",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Messages in Queue",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "6000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2640,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "4f4b04bd.8d0cfc",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "numberSendedMessages",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1520,
        "wires": [
            [
                "73772a48.f3e744"
            ]
        ]
    },
    {
        "id": "2434196c.066cb6",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "18d0f143.d267bf",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "number of sended messages",
        "format": "{{msg.payload.numberSendedMessages}}",
        "layout": "row-spread",
        "x": 2660,
        "y": 1580,
        "wires": []
    },
    {
        "id": "9e3ea463.cad528",
        "type": "link out",
        "z": "f679c5ec.fb0428",
        "name": "Filtering",
        "links": [
            "554e4f27.81c24"
        ],
        "x": 2035,
        "y": 880,
        "wires": []
    },
    {
        "id": "a8eba8bd.c52f98",
        "type": "subflow:60904c4d.0104c4",
        "z": "d43d7e62.0ae71",
        "name": "",
        "env": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "14c63ea5.087c11"
            ]
        ]
    },
    {
        "id": "c34e2007.cbd71",
        "type": "change",
        "z": "d43d7e62.0ae71",
        "name": "append filterCondition to message",
        "rules": [
            {
                "t": "set",
                "p": "filterCondition",
                "pt": "msg",
                "to": "{\"rangeFilter\":{\"columnName\":\"Energy__kWh_\",\"minValue\":10,\"maxValue\":21}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 600,
        "wires": [
            [
                "a8eba8bd.c52f98"
            ]
        ]
    },
    {
        "id": "450ff05e.0f8a1",
        "type": "change",
        "z": "d43d7e62.0ae71",
        "name": "append filterCondition to message",
        "rules": [
            {
                "t": "set",
                "p": "filterCondition",
                "pt": "msg",
                "to": "{\"rangeFilter\":{\"columnName\":\"Energy__kWh_\",\"minValue\":10,\"maxValue\":21},\"whitelistFilter\":{\"columnName\":\"ObjectId\",\"whitelistValues\":[10459,22794,20286,872]},\"blacklistFilter\":{\"columnName\":\"ObjectId\",\"blacklistValues\":[22794]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9228a829.404dd8",
        "type": "subflow:19a47153.1035df",
        "z": "d43d7e62.0ae71",
        "name": "",
        "env": [],
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "14c63ea5.087c11"
            ]
        ]
    },
    {
        "id": "c559e025.384de",
        "type": "change",
        "z": "d43d7e62.0ae71",
        "name": "append suppressed properties to message",
        "rules": [
            {
                "t": "set",
                "p": "suppressed_properties",
                "pt": "msg",
                "to": "{\"suppressed_properties\":[\"ObjectId\",\"Address\",\"City\"]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 440,
        "wires": [
            [
                "9228a829.404dd8"
            ]
        ]
    },
    {
        "id": "554e4f27.81c24",
        "type": "link in",
        "z": "d43d7e62.0ae71",
        "name": "Filtering in",
        "links": [
            "9e3ea463.cad528"
        ],
        "x": 295,
        "y": 520,
        "wires": [
            [
                "14c63ea5.087c11"
            ]
        ]
    },
    {
        "id": "b4bcc326.6ac6d",
        "type": "join",
        "z": "44f2dba4.713184",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 810,
        "y": 580,
        "wires": [
            [
                "82875bbc.eedde8"
            ]
        ]
    },
    {
        "id": "1380d3cd.7c0fcc",
        "type": "split",
        "z": "44f2dba4.713184",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 820,
        "y": 380,
        "wires": [
            [
                "99ce3d72.e613e"
            ]
        ]
    },
    {
        "id": "82875bbc.eedde8",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "array2d",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 580,
        "wires": [
            [
                "c66fdcab.5b319"
            ]
        ]
    },
    {
        "id": "a6b8a4bb.44dc18",
        "type": "comment",
        "z": "44f2dba4.713184",
        "name": "todo: dynamic k",
        "info": "",
        "x": 1130,
        "y": 700,
        "wires": []
    },
    {
        "id": "e846aeff.2c3b3",
        "type": "link out",
        "z": "f679c5ec.fb0428",
        "name": "",
        "links": [
            "3b2b54c5.78bbdc"
        ],
        "x": 535,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5732b882.5fff48",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "reset statistics",
        "rules": [
            {
                "t": "set",
                "p": "maxDelay",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "maxNodeRedDelay",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "messageCounter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "clusterCounterSet",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "delete",
                "p": "firstMessageTimestamp",
                "pt": "global"
            },
            {
                "t": "set",
                "p": "messageCounterForUpdateIntervall",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "numberSendedMessages",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "3b2b54c5.78bbdc",
        "type": "link in",
        "z": "44f2dba4.713184",
        "name": "reset statistics",
        "links": [
            "e846aeff.2c3b3",
            "d8931186.f646c"
        ],
        "x": 215,
        "y": 1740,
        "wires": [
            [
                "5732b882.5fff48",
                "6be8fd26.036294"
            ]
        ]
    },
    {
        "id": "852efd4a.f3e55",
        "type": "function",
        "z": "f679c5ec.fb0428",
        "name": "count messages",
        "func": "if(flow.get('messageCounter') === undefined) {\n    flow.set('messageCounter', 1);\n}\nmessageCounter = flow.get('messageCounter')\nflow.set('messageCounter', messageCounter + 1);\n\nreturn {payload: flow.get('messageCounter')}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "931d5f33.6d46a",
        "type": "ui_button",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "3956295b.f852b6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Calculate Anonymization Statistics",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "1bebbd99.356a92",
                "c4533ca5.75f37"
            ]
        ]
    },
    {
        "id": "a2efd38b.89b1",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "3956295b.f852b6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "discernibility metric",
        "format": "{{msg.payload.discernibilityMetric}}",
        "layout": "row-spread",
        "x": 2110,
        "y": 720,
        "wires": []
    },
    {
        "id": "4f8ed0f9.23797",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "3956295b.f852b6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "average class size",
        "format": "{{msg.payload.averageClassSize}}",
        "layout": "row-spread",
        "x": 2110,
        "y": 760,
        "wires": []
    },
    {
        "id": "a5343344.1774f",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "3956295b.f852b6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "information loss",
        "format": "{{msg.payload.informationLoss}}",
        "layout": "row-spread",
        "x": 2100,
        "y": 800,
        "wires": []
    },
    {
        "id": "c311b5de.6c02a8",
        "type": "ui_text",
        "z": "44f2dba4.713184",
        "group": "3956295b.f852b6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "generalized information loss",
        "format": "{{msg.payload.generalized_information_loss}}",
        "layout": "row-spread",
        "x": 2140,
        "y": 840,
        "wires": []
    },
    {
        "id": "c39fca7a.8264e8",
        "type": "ui_toast",
        "z": "44f2dba4.713184",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Loaded Data",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "aab90020.7eb4e",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully loaded data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 280,
        "wires": [
            [
                "c39fca7a.8264e8"
            ]
        ]
    },
    {
        "id": "a26554d9.b78e68",
        "type": "change",
        "z": "ed02ca62.53a888",
        "name": "set topic to station name",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.Station_Name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2090,
        "y": 920,
        "wires": [
            [
                "907878d0.1c7368"
            ]
        ]
    },
    {
        "id": "907878d0.1c7368",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "remove white spaces from topic",
        "func": "msg.topic = msg.topic.replace(/ /g,'')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 920,
        "wires": [
            [
                "5104a326.b585ec"
            ]
        ]
    },
    {
        "id": "47c0427d.a2cb5c",
        "type": "change",
        "z": "ed02ca62.53a888",
        "name": "add benchmark timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload.timestampNodeRedBeforeSendAsSimulatedStation",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3040,
        "y": 920,
        "wires": [
            [
                "71d7feb0.6c40b"
            ]
        ]
    },
    {
        "id": "71d7feb0.6c40b",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8d767608.3873e8",
        "x": 3510,
        "y": 940,
        "wires": []
    },
    {
        "id": "5104a326.b585ec",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2690,
        "y": 920,
        "wires": [
            [
                "12a8b73a.4304b9",
                "47c0427d.a2cb5c"
            ]
        ]
    },
    {
        "id": "5864379a.27cfd8",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "messageCounter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "12a8b73a.4304b9",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "count number sended messages",
        "func": "global.set(\"numberSendedMessages\", global.get(\"numberSendedMessages\") + 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3250,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7a559f8c.3b417",
        "type": "delay",
        "z": "44f2dba4.713184",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1900,
        "y": 720,
        "wires": [
            [
                "a2efd38b.89b1"
            ]
        ]
    },
    {
        "id": "6886c066.77c5a",
        "type": "delay",
        "z": "44f2dba4.713184",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1900,
        "y": 760,
        "wires": [
            [
                "4f8ed0f9.23797"
            ]
        ]
    },
    {
        "id": "1aa6bc6e.6b2004",
        "type": "delay",
        "z": "44f2dba4.713184",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1900,
        "y": 800,
        "wires": [
            [
                "a5343344.1774f"
            ]
        ]
    },
    {
        "id": "86e79b19.646ae8",
        "type": "delay",
        "z": "44f2dba4.713184",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1900,
        "y": 840,
        "wires": [
            [
                "c311b5de.6c02a8"
            ]
        ]
    },
    {
        "id": "83d61710.40a4c8",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "get all topics",
        "func": "if( flow.get(\"topics\") === undefined) {\n    flow.set(\"topics\", new Set())\n}\n\nflow.set(\"topics\", flow.get(\"topics\").add(msg.topic))\n\nreturn {payload : Array.from(flow.get(\"topics\"))};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 1020,
        "wires": [
            [
                "63e756b7.c68988"
            ]
        ]
    },
    {
        "id": "63e756b7.c68988",
        "type": "json",
        "z": "ed02ca62.53a888",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3230,
        "y": 1020,
        "wires": [
            [
                "523430c8.9d725"
            ]
        ]
    },
    {
        "id": "523430c8.9d725",
        "type": "debug",
        "z": "ed02ca62.53a888",
        "name": "print all topics",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3440,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e4a7462b.53c9e8",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "change date to unix format",
        "func": "msg.payload[\"Start_Date___Time\"] = Date.parse(msg.payload[\"Start_Date___Time\"]);\nmsg.payload[\"End_Date___Time\"] = Date.parse(msg.payload[\"End_Date___Time\"]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 980,
        "wires": [
            [
                "9bb30ca2.d1f6f"
            ]
        ]
    },
    {
        "id": "ddadc3e5.42071",
        "type": "inject",
        "z": "44f2dba4.713184",
        "name": "reset statistics",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1890,
        "y": 940,
        "wires": [
            [
                "1a123c51.a9f044",
                "c05609dc.5466e8",
                "afad0c4b.df2b9",
                "deea057d.314e98",
                "de796a30.f776b8",
                "2434196c.066cb6"
            ]
        ]
    },
    {
        "id": "d8931186.f646c",
        "type": "link out",
        "z": "ed02ca62.53a888",
        "name": "",
        "links": [
            "3b2b54c5.78bbdc"
        ],
        "x": 305,
        "y": 740,
        "wires": []
    },
    {
        "id": "64f5fe48.c5aca",
        "type": "link in",
        "z": "f679c5ec.fb0428",
        "name": "main mqqt bypass",
        "links": [
            "5fe6e580.1bcd4c"
        ],
        "x": 915,
        "y": 640,
        "wires": [
            [
                "eb1c3b1e.bfd068",
                "eca54672.498798"
            ]
        ]
    },
    {
        "id": "5fe6e580.1bcd4c",
        "type": "link out",
        "z": "ed02ca62.53a888",
        "name": "emulator mqqt bypass",
        "links": [
            "64f5fe48.c5aca"
        ],
        "x": 3375,
        "y": 860,
        "wires": []
    },
    {
        "id": "14c63ea5.087c11",
        "type": "link out",
        "z": "d43d7e62.0ae71",
        "name": "filtering out",
        "links": [
            "3bebd1b1.20451e"
        ],
        "x": 1265,
        "y": 520,
        "wires": []
    },
    {
        "id": "3bebd1b1.20451e",
        "type": "link in",
        "z": "f679c5ec.fb0428",
        "name": "",
        "links": [
            "14c63ea5.087c11"
        ],
        "x": 2255,
        "y": 880,
        "wires": [
            [
                "eb697a48.ed8c28"
            ]
        ]
    },
    {
        "id": "c5e646c1.299ca8",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "maxNodeRedDelay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1000,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "55d841d2.560a8",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nodeRedDelay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1080,
        "wires": [
            [
                "26c01a7f.0a9946",
                "5f7d7006.d75ed"
            ]
        ]
    },
    {
        "id": "54b90938.6c79b8",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "maxRedCastleDelay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1140,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "d2612e9c.552f7",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "redCastleDelay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1220,
        "wires": [
            [
                "26c01a7f.0a9946",
                "5f7d7006.d75ed"
            ]
        ]
    },
    {
        "id": "adb84fe2.a3e78",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "messagesPerSecond",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1340,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "55d4b970.66b778",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "differenceSendReceived",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1380,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "28f46a34.3c2f76",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "clusterCount",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1440,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "73772a48.f3e744",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "numberSendedMessages",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1540,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "26c01a7f.0a9946",
        "type": "join",
        "z": "44f2dba4.713184",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1590,
        "y": 1280,
        "wires": [
            [
                "fa4bd782.7e9218"
            ]
        ]
    },
    {
        "id": "f096e5bc.cd6498",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "messageCounter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1280,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "94789d7f.c9105",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "differenceNodeRedDelayAndRedCasteDelay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 1180,
        "wires": [
            [
                "26c01a7f.0a9946"
            ]
        ]
    },
    {
        "id": "e8f4bfa3.da3f2",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.differenceSendReceived",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 1460,
        "wires": [
            [
                "deea057d.314e98"
            ]
        ]
    },
    {
        "id": "72e4214c.7c6e5",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.messagesPerSecond",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 1340,
        "wires": [
            [
                "afad0c4b.df2b9"
            ]
        ]
    },
    {
        "id": "22b36547.a51fba",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.redCastleDelay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 1220,
        "wires": [
            [
                "c05609dc.5466e8"
            ]
        ]
    },
    {
        "id": "6d1a347d.86e76c",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.nodeRedDelay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2370,
        "y": 1080,
        "wires": [
            [
                "1a123c51.a9f044"
            ]
        ]
    },
    {
        "id": "fa4bd782.7e9218",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 1280,
        "wires": [
            [
                "8133623b.5b86",
                "2434196c.066cb6",
                "e8f4bfa3.da3f2",
                "5ae6ad09.f6b9b4",
                "72e4214c.7c6e5",
                "313004a.c1cedfc",
                "22b36547.a51fba",
                "c85f43d8.4a593",
                "6d1a347d.86e76c",
                "21f4a4e6.daeebc",
                "1479b594.bf76fa"
            ]
        ]
    },
    {
        "id": "3e4a3543.2e4dba",
        "type": "file",
        "z": "44f2dba4.713184",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2870,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "1479b594.bf76fa",
        "type": "join",
        "z": "44f2dba4.713184",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1950,
        "y": 1820,
        "wires": [
            [
                "b8e080e7.fc6bd"
            ]
        ]
    },
    {
        "id": "53189e6e.f1c8b",
        "type": "ui_button",
        "z": "44f2dba4.713184",
        "name": "",
        "group": "fd975b9c.a00f58",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Save statistics to file",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1220,
        "y": 1820,
        "wires": [
            [
                "ea41121c.ef529"
            ]
        ]
    },
    {
        "id": "ea41121c.ef529",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 1820,
        "wires": [
            [
                "1479b594.bf76fa"
            ]
        ]
    },
    {
        "id": "b8e080e7.fc6bd",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "set statistic file name",
        "func": "statisticFileName = flow.get('statisticFileName') \n                    || \"benchmark_results/\" + new Date().toISOString().slice(0, 19).replace(/:/g,'') + \".csv\";\nflow.set('statisticFileName', statisticFileName) \nmsg.filename = statisticFileName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1820,
        "wires": [
            [
                "d3ddecc6.ef378"
            ]
        ]
    },
    {
        "id": "265eb2ad.d89dfe",
        "type": "csv",
        "z": "44f2dba4.713184",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2710,
        "y": 1820,
        "wires": [
            [
                "3e4a3543.2e4dba"
            ]
        ]
    },
    {
        "id": "c286f57c.6697d8",
        "type": "debug",
        "z": "44f2dba4.713184",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 1920,
        "wires": []
    },
    {
        "id": "d3ddecc6.ef378",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "remove the 'message.complete' message",
        "func": "msg.payload.splice(-1, 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 1820,
        "wires": [
            [
                "265eb2ad.d89dfe",
                "c286f57c.6697d8"
            ]
        ]
    },
    {
        "id": "6be8fd26.036294",
        "type": "change",
        "z": "44f2dba4.713184",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "statisticFileName",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "6809299b.422308",
        "type": "zeromq in",
        "z": "aaf1335a.c3997",
        "name": "",
        "topic": "TOPIC/CASTLE_OUTPUT",
        "fields": "topic,payload",
        "server": "tcp://127.0.0.1:5557",
        "output": "string",
        "isserver": false,
        "intype": "sub",
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "5717e5bd.13704c"
            ]
        ]
    },
    {
        "id": "8b908c57.5c8ff",
        "type": "zeromq out",
        "z": "aaf1335a.c3997",
        "name": "",
        "topic": "",
        "fields": "topic,payload",
        "server": "tcp://*:5556",
        "isserver": true,
        "intype": "pub",
        "x": 1000,
        "y": 220,
        "wires": []
    },
    {
        "id": "6533e467.b82dec",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "send data to casleguard",
        "info": "",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "3cd22fbf.13599",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "receive data from casleguard",
        "info": "",
        "x": 1300,
        "y": 160,
        "wires": []
    },
    {
        "id": "e559349b.fc7138",
        "type": "subflow:aaf1335a.c3997",
        "z": "f679c5ec.fb0428",
        "name": "",
        "env": [],
        "x": 290,
        "y": 900,
        "wires": [
            [
                "eb1c3b1e.bfd068",
                "852efd4a.f3e55",
                "eca54672.498798"
            ],
            [
                "2194dfa24a11853e"
            ]
        ]
    },
    {
        "id": "5717e5bd.13704c",
        "type": "function",
        "z": "aaf1335a.c3997",
        "name": "replace some python specific json things to node red parsable json",
        "func": "msg.payload = msg.payload.replace(/'/g,'\"');\nmsg.payload = msg.payload.replace(/True/g,true);\nmsg.payload = msg.payload.replace(/False/g,false);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 220,
        "wires": [
            [
                "77f16291.d802ac"
            ]
        ]
    },
    {
        "id": "77f16291.d802ac",
        "type": "json",
        "z": "aaf1335a.c3997",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1970,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "889655ce.1af3a8",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"fill\":\"green\",\"shape\":\"dot\",\"text\":\"running and connected\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a33885a1.063e58",
        "type": "status",
        "z": "aaf1335a.c3997",
        "name": "",
        "scope": [
            "917f0236.1816e"
        ],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "3ef3d11c.40cdce",
                "c363b24e80ed77a6"
            ]
        ]
    },
    {
        "id": "b9237fc.e26088",
        "type": "switch",
        "z": "aaf1335a.c3997",
        "name": "",
        "property": "exec.status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "pid",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "rc",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 820,
        "wires": [
            [
                "3c48412604f15e61",
                "98a016600411fbbe"
            ],
            [
                "eecbab44.fe2358",
                "5bbda90eec273536"
            ]
        ]
    },
    {
        "id": "eecbab44.fe2358",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"fill\":\"red\",\"shape\":\"dot\",\"text\":\"crashed\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "3ef3d11c.40cdce",
        "type": "debug",
        "z": "aaf1335a.c3997",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "status",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 840,
        "wires": []
    },
    {
        "id": "de6eb866.fbcb78",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"fill\":\"red\",\"shape\":\"ring\",\"text\":\"error with ZeroMQ connection\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "917f0236.1816e",
        "type": "exec",
        "z": "aaf1335a.c3997",
        "command": "python3 CASTLE/src/main.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "run CASTLEGUARD",
        "x": 1920,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bcab5cd0.2e945",
        "type": "mqtt in",
        "z": "f679c5ec.fb0428",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto",
        "broker": "8d767608.3873e8",
        "nl": false,
        "rap": false,
        "rh": "0",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "5ad2ccaf91d59969"
            ]
        ]
    },
    {
        "id": "5ad2ccaf91d59969",
        "type": "subflow:19a47153.1035df",
        "z": "f679c5ec.fb0428",
        "name": "",
        "env": [],
        "x": 340,
        "y": 740,
        "wires": [
            [
                "24562832646655c6"
            ]
        ]
    },
    {
        "id": "24562832646655c6",
        "type": "subflow:60904c4d.0104c4",
        "z": "f679c5ec.fb0428",
        "name": "",
        "env": [],
        "x": 330,
        "y": 780,
        "wires": [
            [
                "4129c2b8ee6428f4"
            ]
        ]
    },
    {
        "id": "4129c2b8ee6428f4",
        "type": "subflow:2bd5e7f7.0b5858",
        "z": "f679c5ec.fb0428",
        "name": "",
        "x": 340,
        "y": 820,
        "wires": [
            [
                "e559349b.fc7138"
            ]
        ]
    },
    {
        "id": "3c48412604f15e61",
        "type": "switch",
        "z": "aaf1335a.c3997",
        "name": "",
        "property": "zeromq.status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "bound",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 800,
        "wires": [
            [
                "889655ce.1af3a8"
            ]
        ]
    },
    {
        "id": "c363b24e80ed77a6",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "status",
                "pt": "msg",
                "to": "exec.status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 920,
        "wires": [
            [
                "71b14988de0122cd"
            ]
        ]
    },
    {
        "id": "7fa38937327455e5",
        "type": "status",
        "z": "aaf1335a.c3997",
        "name": "",
        "scope": [
            "8b908c57.5c8ff",
            "6809299b.422308"
        ],
        "x": 700,
        "y": 720,
        "wires": [
            [
                "f6ee7532c567b5e5"
            ]
        ]
    },
    {
        "id": "f6ee7532c567b5e5",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "status",
                "pt": "msg",
                "to": "zeromq.status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 720,
        "wires": [
            [
                "71b14988de0122cd"
            ]
        ]
    },
    {
        "id": "71b14988de0122cd",
        "type": "join",
        "z": "aaf1335a.c3997",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1170,
        "y": 820,
        "wires": [
            [
                "b9237fc.e26088",
                "2c199d3a2c95bcdb"
            ]
        ]
    },
    {
        "id": "2c199d3a2c95bcdb",
        "type": "switch",
        "z": "aaf1335a.c3997",
        "name": "",
        "property": "zeromq.status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "red",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 860,
        "wires": [
            [
                "de6eb866.fbcb78"
            ]
        ]
    },
    {
        "id": "2194dfa24a11853e",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1020,
        "wires": []
    },
    {
        "id": "98a016600411fbbe",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "castleguardPID",
                "pt": "flow",
                "to": "$substringAfter(exec.status.text, \"pid:\")\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 660,
        "wires": [
            [
                "ddcdf4a1c6e6f3db"
            ]
        ]
    },
    {
        "id": "5bbda90eec273536",
        "type": "change",
        "z": "aaf1335a.c3997",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "castleguardPID",
                "pt": "flow",
                "to": "-1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 720,
        "wires": [
            [
                "ddcdf4a1c6e6f3db"
            ]
        ]
    },
    {
        "id": "39c42862abf1c7ac",
        "type": "delay",
        "z": "aaf1335a.c3997",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "20",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "75e6bd6e0efa6be2"
            ]
        ]
    },
    {
        "id": "75e6bd6e0efa6be2",
        "type": "exec",
        "z": "aaf1335a.c3997",
        "command": "pgrep -f CASTLE",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1350,
        "y": 400,
        "wires": [
            [
                "5f27fbde16b2231b",
                "aa0ad9d0522e1f62"
            ],
            [
                "5f27fbde16b2231b"
            ],
            [
                "5f27fbde16b2231b"
            ]
        ]
    },
    {
        "id": "f49a1115a74871d4",
        "type": "debug",
        "z": "aaf1335a.c3997",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 740,
        "wires": []
    },
    {
        "id": "5f27fbde16b2231b",
        "type": "debug",
        "z": "aaf1335a.c3997",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 520,
        "wires": []
    },
    {
        "id": "131a44de91baf277",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1160,
        "wires": []
    },
    {
        "id": "aa0ad9d0522e1f62",
        "type": "switch",
        "z": "aaf1335a.c3997",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 400,
        "wires": [
            [
                "917f0236.1816e",
                "9c0447124ec4c7b7"
            ]
        ]
    },
    {
        "id": "ddcdf4a1c6e6f3db",
        "type": "debug",
        "z": "aaf1335a.c3997",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 660,
        "wires": []
    },
    {
        "id": "9c0447124ec4c7b7",
        "type": "debug",
        "z": "aaf1335a.c3997",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 480,
        "wires": []
    },
    {
        "id": "424dae7b8ef1c704",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "check for running instance (only works on linux)",
        "info": "",
        "x": 1440,
        "y": 340,
        "wires": []
    },
    {
        "id": "d979d51171821c9b",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "Managing the different status shown on the outside node",
        "info": "",
        "x": 850,
        "y": 660,
        "wires": []
    },
    {
        "id": "c6957301ce3cea89",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "Error Output",
        "info": "",
        "x": 2250,
        "y": 400,
        "wires": []
    },
    {
        "id": "3557a49a46084b9a",
        "type": "comment",
        "z": "aaf1335a.c3997",
        "name": "Output of anonymized messages",
        "info": "",
        "x": 2320,
        "y": 220,
        "wires": []
    },
    {
        "id": "13556012dbeb296d",
        "type": "msg-speed",
        "z": "44f2dba4.713184",
        "name": "",
        "frequency": "min",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 950,
        "y": 1340,
        "wires": [
            [
                "3b94605041515bb2"
            ],
            []
        ]
    },
    {
        "id": "3b94605041515bb2",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "msg/m to msg/s",
        "func": "return {payload: (msg.payload / 60)};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1340,
        "wires": [
            [
                "adb84fe2.a3e78"
            ]
        ]
    }
]