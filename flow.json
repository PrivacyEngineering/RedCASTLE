[
    {
        "id": "f679c5ec.fb0428",
        "type": "tab",
        "label": "ks-Anonymization",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ed02ca62.53a888",
        "type": "tab",
        "label": "Smart Metering Emulator",
        "disabled": false,
        "info": ""
    },
    {
        "id": "540182c4.0cacec",
        "type": "tab",
        "label": "Test Emulator Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "44f2dba4.713184",
        "type": "tab",
        "label": "Statistics Test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "60da4e27.9e901",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2bd5e7f7.0b5858",
        "type": "subflow",
        "name": "Conditional Changes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 280,
                "wires": [
                    {
                        "id": "faddfcbc.ef93f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 280,
                "wires": [
                    {
                        "id": "faddfcbc.ef93f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "60904c4d.0104c4",
        "type": "subflow",
        "name": "Conditional Filter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 160,
                "wires": [
                    {
                        "id": "6f6c2af1.9f6e64"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 160,
                "wires": [
                    {
                        "id": "6f6c2af1.9f6e64",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "19a47153.1035df",
        "type": "subflow",
        "name": "Suppress Properties",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 300,
                "wires": [
                    {
                        "id": "f960e58b.28ccf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 300,
                "wires": [
                    {
                        "id": "f960e58b.28ccf8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "19ca91ba.af4a0e",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "Emulate Streaming Data behavior",
        "style": {
            "fill": "#ffdf7f",
            "label": true,
            "stroke": "#ffcf3f",
            "stroke-opacity": "0.9",
            "color": "#000000",
            "fill-opacity": "0.54"
        },
        "nodes": [
            "35d218ec.92f1a8",
            "e037e8eb.0ee838",
            "1254bb0d.f4bed5",
            "64956d74.3c8114",
            "7cd7f126.df78f",
            "dea57652.5dd918",
            "30d43126.1cfa7e",
            "af7a7e82.6723",
            "e40e3cc8.f834a",
            "cd3849d4.f79028",
            "28a756fd.4545fa",
            "32da1711.188a98",
            "3265ef6c.64d51",
            "c31fb50a.688e08",
            "ea0e6436.fe7f48",
            "654f3a99.58aee4",
            "ba07826a.d32f7",
            "6b539d68.cb4084",
            "229b79e8.7b8126",
            "a959b3c1.798d9",
            "f693f0a.47f881",
            "641acf84.f005d",
            "e09eb717.fa45b8",
            "8174f40c.6028c8",
            "823ba3c8.21647",
            "37f1ba8b.669dd6",
            "662a9b9d.ee6c94"
        ],
        "x": 2234,
        "y": 619,
        "w": 692,
        "h": 562
    },
    {
        "id": "e18cf721.789868",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "generate car owner persona list",
        "style": {
            "label": true
        },
        "nodes": [
            "9aa878b2.7e4fc8",
            "8b59e67.5003e18"
        ],
        "x": 374,
        "y": 699,
        "w": 472,
        "h": 82
    },
    {
        "id": "cd180a4c.27e908",
        "type": "group",
        "z": "60904c4d.0104c4",
        "name": "Filter",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6f6c2af1.9f6e64"
        ],
        "x": 254,
        "y": 119,
        "w": 232,
        "h": 82
    },
    {
        "id": "b1ae5997.ec6898",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "Change car price class",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "2d317e08.e1f652",
            "42403d84.0c7cd4"
        ],
        "x": 1154,
        "y": 879,
        "w": 732,
        "h": 82
    },
    {
        "id": "8f7d71c7.eca34",
        "type": "group",
        "z": "2bd5e7f7.0b5858",
        "name": "Change",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "faddfcbc.ef93f"
        ],
        "x": 714,
        "y": 239,
        "w": 272,
        "h": 82
    },
    {
        "id": "75d75513.333d1c",
        "type": "group",
        "z": "ed02ca62.53a888",
        "name": "Change car prices",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "36a1d79b.ecb2c8",
            "4439c462.3a2c8c"
        ],
        "x": 1174,
        "y": 699,
        "w": 672,
        "h": 82
    },
    {
        "id": "e68402fe.4fdb1",
        "type": "group",
        "z": "19a47153.1035df",
        "name": "Reduce",
        "style": {
            "label": true,
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "color": "#ffffff"
        },
        "nodes": [
            "f960e58b.28ccf8",
            "3fd6dcd1.eb1a14"
        ],
        "x": 214,
        "y": 219,
        "w": 952,
        "h": 122
    },
    {
        "id": "261b9b5a.56f684",
        "type": "mqtt-broker",
        "name": "fog_emulator_broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a1625557.3ff658",
        "type": "ui_group",
        "name": "Standard",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "144804ba.ddd68b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b23cfab0.cda678",
        "type": "ui_tab",
        "name": "Test Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "18d0f143.d267bf",
        "type": "ui_group",
        "name": "Test UI",
        "tab": "b23cfab0.cda678",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f6fed640.1136b8",
        "type": "exec",
        "z": "f679c5ec.fb0428",
        "command": "python \"C:\\Users\\Roschy\\.node-red\\projects\\k-anonymity\\CASTLE\\src\\main.py\"  ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "run CASTLEGUARD ",
        "x": 640,
        "y": 1340,
        "wires": [
            [
                "cf0b65f9.007318"
            ],
            [
                "cf0b65f9.007318"
            ],
            [
                "cf0b65f9.007318"
            ]
        ]
    },
    {
        "id": "cf0b65f9.007318",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b61e65dd.8c1408",
        "type": "inject",
        "z": "f679c5ec.fb0428",
        "name": "not the start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1340,
        "wires": [
            [
                "f6fed640.1136b8"
            ]
        ]
    },
    {
        "id": "37891673.84bf2a",
        "type": "csv",
        "z": "ed02ca62.53a888",
        "name": "convert csv to object stream",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 400,
        "y": 840,
        "wires": [
            [
                "9aa878b2.7e4fc8"
            ]
        ]
    },
    {
        "id": "49c088f6.9ba0c8",
        "type": "file in",
        "z": "ed02ca62.53a888",
        "name": "load file example csv",
        "filename": "Electric_Vehicle_Charging_Station_Energy_Consumption (1).csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 160,
        "y": 840,
        "wires": [
            [
                "37891673.84bf2a"
            ]
        ]
    },
    {
        "id": "abe891b5.42669",
        "type": "inject",
        "z": "ed02ca62.53a888",
        "name": "click to start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "49c088f6.9ba0c8"
            ]
        ]
    },
    {
        "id": "35d218ec.92f1a8",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 660,
        "wires": [
            [
                "e037e8eb.0ee838"
            ]
        ]
    },
    {
        "id": "c26eb7cb.5e5418",
        "type": "switch",
        "z": "ed02ca62.53a888",
        "name": "",
        "property": "payload.Station_Name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "BOULDER / AIRPORT ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / ALPINE ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / ANNEX ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / ATRIUM ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / BASELINE ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / BOULDER PARK S1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / BOULDER PARK S2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / CARPENTER PARK1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / CARPENTER PARK2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / EAST REC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / FACILITIES ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / JUNCTION ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / N BOULDER REC 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / REC CENTER ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / REC CENTER ST2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / RESERVOIR ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDER / RESERVOIR ST2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BOULDERJUNCTION / JUNCTION ST1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1000WALNUT1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1000WALNUT2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1100WALNUT1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1104 SPRUCE1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1400 WALNUT1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1500PEARL1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 1500PEARL2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / 2200 BROADWAY1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMM VITALITY / BOULDER JCTN",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 27,
        "x": 1950,
        "y": 840,
        "wires": [
            [
                "e40e3cc8.f834a"
            ],
            [
                "cd3849d4.f79028"
            ],
            [
                "28a756fd.4545fa"
            ],
            [
                "32da1711.188a98"
            ],
            [
                "ea0e6436.fe7f48"
            ],
            [
                "6b539d68.cb4084"
            ],
            [
                "f693f0a.47f881"
            ],
            [
                "8174f40c.6028c8"
            ],
            [
                "662a9b9d.ee6c94"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "e037e8eb.0ee838",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/AIRPORT_ST1",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2740,
        "y": 660,
        "wires": []
    },
    {
        "id": "a696094b.7a8d38",
        "type": "mqtt in",
        "z": "540182c4.0cacec",
        "name": "",
        "topic": "BOULDER/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "261b9b5a.56f684",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "27eaa992.590db6"
            ]
        ]
    },
    {
        "id": "1254bb0d.f4bed5",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "30",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 720,
        "wires": [
            [
                "64956d74.3c8114"
            ]
        ]
    },
    {
        "id": "64956d74.3c8114",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/ALPINE_ST1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2730,
        "y": 720,
        "wires": []
    },
    {
        "id": "7cd7f126.df78f",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 780,
        "wires": [
            [
                "dea57652.5dd918"
            ]
        ]
    },
    {
        "id": "dea57652.5dd918",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/ANNEX_ST1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2730,
        "y": 780,
        "wires": []
    },
    {
        "id": "30d43126.1cfa7e",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 840,
        "wires": [
            [
                "af7a7e82.6723"
            ]
        ]
    },
    {
        "id": "af7a7e82.6723",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/ATRIUM_ST1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2730,
        "y": 840,
        "wires": []
    },
    {
        "id": "27eaa992.590db6",
        "type": "json",
        "z": "540182c4.0cacec",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e40e3cc8.f834a",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 660,
        "wires": [
            [
                "35d218ec.92f1a8"
            ]
        ]
    },
    {
        "id": "cd3849d4.f79028",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 720,
        "wires": [
            [
                "1254bb0d.f4bed5"
            ]
        ]
    },
    {
        "id": "28a756fd.4545fa",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 780,
        "wires": [
            [
                "7cd7f126.df78f"
            ]
        ]
    },
    {
        "id": "32da1711.188a98",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 840,
        "wires": [
            [
                "30d43126.1cfa7e"
            ]
        ]
    },
    {
        "id": "3265ef6c.64d51",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "30",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 900,
        "wires": [
            [
                "c31fb50a.688e08"
            ]
        ]
    },
    {
        "id": "c31fb50a.688e08",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/BASELINE_ST1",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2740,
        "y": 900,
        "wires": []
    },
    {
        "id": "ea0e6436.fe7f48",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 900,
        "wires": [
            [
                "3265ef6c.64d51"
            ]
        ]
    },
    {
        "id": "654f3a99.58aee4",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 960,
        "wires": [
            [
                "ba07826a.d32f7"
            ]
        ]
    },
    {
        "id": "ba07826a.d32f7",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/BOULDER_PARK/S1",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2760,
        "y": 960,
        "wires": []
    },
    {
        "id": "6b539d68.cb4084",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 960,
        "wires": [
            [
                "654f3a99.58aee4"
            ]
        ]
    },
    {
        "id": "229b79e8.7b8126",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 1020,
        "wires": [
            [
                "a959b3c1.798d9"
            ]
        ]
    },
    {
        "id": "a959b3c1.798d9",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/BOULDER_PARK/S2",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2760,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f693f0a.47f881",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 1020,
        "wires": [
            [
                "229b79e8.7b8126"
            ]
        ]
    },
    {
        "id": "641acf84.f005d",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 1080,
        "wires": [
            [
                "e09eb717.fa45b8"
            ]
        ]
    },
    {
        "id": "e09eb717.fa45b8",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/CARPENTER_PARK/1",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2760,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8174f40c.6028c8",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 1080,
        "wires": [
            [
                "641acf84.f005d"
            ]
        ]
    },
    {
        "id": "823ba3c8.21647",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2500,
        "y": 1140,
        "wires": [
            [
                "37f1ba8b.669dd6"
            ]
        ]
    },
    {
        "id": "37f1ba8b.669dd6",
        "type": "mqtt out",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "topic": "BOULDER/CARPENTER_PARK/2",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "261b9b5a.56f684",
        "x": 2760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "662a9b9d.ee6c94",
        "type": "delay",
        "z": "ed02ca62.53a888",
        "g": "19ca91ba.af4a0e",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2310,
        "y": 1140,
        "wires": [
            [
                "823ba3c8.21647"
            ]
        ]
    },
    {
        "id": "9aa878b2.7e4fc8",
        "type": "function",
        "z": "ed02ca62.53a888",
        "g": "e18cf721.789868",
        "name": "generate car owners",
        "func": "\ncustomer_list = Array();\ncars_brands_and_modells = [\n    [\"Audi\", \"e-tron 55\", \"e-tron 50\"],\n    [\"BMW\", \"i3\"],\n    [\"Ford\", \"Focus Electric\", \"Mustang Mach-E\", \"Ford F-150 Lightning electric pickup\"],\n    [\"Hyundai\", \"Ioniq Electric\", \"Kona Electric\"],\n    [\"Jaguar\", \"I-Pace\"],\n    [\"Mercedes-Benz\", \"B-Class Electric Drive\", \"EQC\"],\n    [\"Peugeot\", \"Peugeot iOn\", \"e208\", \"e2008\"],\n    [\"Renault\", \"Fluence Z.E.\", \"SM3 Z.E.\", \"Zoe\", \"Twizy\", \"Kangoo Z.E.\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Tesla\", \"Model S\", \"Model X\", \"Model 3\", \"Model Y\"],\n    [\"Volkswagen\", \"e-up!\", \"ID.4\", \"ID.3\"]\n];\n    \n    \nfor (i = 0; i < 100; i++) {\n\n    car_brand_index = Math.floor(Math.random()*cars_brands_and_modells.length);\n    car_modell_index = Math.floor(Math.random() * (cars_brands_and_modells[car_brand_index].length-1)) + 1\n    \n    cusomterObject = new Object();\n    cusomterObject.customer_id = 1000+i\n    \n    cusomterObject.allow_dynamic_charging = Math.random() < 0.5;\n    cusomterObject.car_brand = cars_brands_and_modells[car_brand_index][0]\n    cusomterObject.car_modell = cars_brands_and_modells[car_brand_index][car_modell_index]\n    var newMsg = cusomterObject;\n    customer_list.push(newMsg);\n    node.log(\"Test\");\n}\n\n\nreturn { payload: customer_list};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 740,
        "wires": [
            [
                "8b59e67.5003e18"
            ]
        ]
    },
    {
        "id": "8b59e67.5003e18",
        "type": "change",
        "z": "ed02ca62.53a888",
        "g": "e18cf721.789868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "owner_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 740,
        "wires": [
            [
                "cb546c79.86a36"
            ]
        ]
    },
    {
        "id": "cb546c79.86a36",
        "type": "function",
        "z": "ed02ca62.53a888",
        "name": "assign car owner from flow.owner_data to each charge position",
        "func": "\n\nowner_data = flow.get('owner_data')\nif (owner_data.length <= 0) {\n    node.error(\"owner_data list not set!\");\n}\n\n\n\nowner = owner_data[Math.floor(Math.random()*owner_data.length)]\nfor (var attrname in owner) \n{ \n    msg.payload[attrname] = owner[attrname]; \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "36a1d79b.ecb2c8"
            ]
        ]
    },
    {
        "id": "bcab5cd0.2e945",
        "type": "mqtt in",
        "z": "f679c5ec.fb0428",
        "name": "",
        "topic": "TOPIC/CASTLE_OUTPUT",
        "qos": "2",
        "datatype": "auto",
        "broker": "261b9b5a.56f684",
        "nl": false,
        "rap": false,
        "rh": 0,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "7b7bd8aa.432ac8",
                "cfe57a06.b97168"
            ]
        ]
    },
    {
        "id": "afcb8dcd.5148c",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "discernibility_metric",
        "func": "metric = 0;\nk = msg.payload.k;\n//quasi_identifiers = msg.payload.quasi_identifiers;\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\nnode.warn({\"dataframe\": dataframe});\nnode.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\n\n\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n\nfor (var value of new Set(dataframe_t[equivalenceClassColumnIndex].slice(1))){\n    counter = 0;\n    for (var entry of dataframe_t[equivalenceClassColumnIndex].slice(1)) {\n        \n        if(entry == value) {\n            counter++;\n        }\n    }\n    \n    eq_class_size = counter;\n    node.warn({\"eq_class_size\": eq_class_size, \"msg\":msg});\n    if (eq_class_size >= k){\n        metric += Math.pow(eq_class_size, 2)\n    }\n    else {\n        metric += dataframe.length * eq_class_size\n    }\n}\n\n//msg.payload.discernibilityMetric = metric;\n\nmsg = {payload: new Object()};\nmsg.payload.discernibilityMetric = metric;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "b69cba0d.89a368"
            ]
        ]
    },
    {
        "id": "a9c0de1.34c292",
        "type": "inject",
        "z": "44f2dba4.713184",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\t    \"Nachricht\": \"Test\", \t    \"equivalenceClassColumn\":\"equivalenceClass\",\t    \"k\": 3,\t    \"quasiIdentifiers\": [\"job\", \"age\", \"pin\"]\t}",
        "payloadType": "jsonata",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "940cf07b.c7c35"
            ]
        ]
    },
    {
        "id": "b69cba0d.89a368",
        "type": "debug",
        "z": "44f2dba4.713184",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 540,
        "wires": []
    },
    {
        "id": "940cf07b.c7c35",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "categorize columns",
        "func": "dataframe = msg.payload.dataframe;\ncolumnNames = msg.payload.columnNames;\n\ncolumnNames = [\"pin\", \"job\"]\n\ndataframe = [\n    [\"job\", \"age\", \"pin\", \"equivalenceClass\"],\n    [\"TGT1\", 49, 132042, 1],\n    [\"PGT1\", 40, 132021, 0], \n    [\"PPRT1\", 44, 132024, 0], \n    [\"TGT\", 48, 132046, 1],\n    [\"PPRT\", 45, 132045, 1],\n    [\"PGT\", 43, 132027, 0],\n    [\"PGT\", 49, 132046, 0]\n    ];\n\n\n\ndataframeUniqueSet = [];\n\n\ndataframe_t = dataframe;\n\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n\ncategorizedDataframe_t = dataframe_t.map(function(arr) {return arr.slice();});\n\nnode.warn({\"dataframe_t = \": dataframe_t, \"msg\":msg});\nnode.warn({\"dataframe = \": dataframe, \"msg\":msg});\n\ndataframeSet = []\n\nfor (var row = 0; row < dataframe_t.length; row++) {\n    if (columnNames.includes(dataframe_t[row][0])) {\n        // create set to keep only unique entries\n        // slice because the first one is the name\n        dataframeUniqueSet[row] = new Set(dataframe_t[row].slice(1))\n        \n        // set categories based on the unique values\n        // skip first col as it is the name\n        for (var col = 1; col < dataframe_t[row].length; col++) {\n            dataframeRowUniqueArray = Array.from(dataframeUniqueSet[row]);\n            categorizedDataframe_t[row][col] = (dataframeRowUniqueArray.indexOf(dataframe_t[row][col])) + 1;\n        }\n    }\n}\n\nnode.warn({\"categorizedDataframe_t\": categorizedDataframe_t, \"msg\":msg});\nnode.warn({\"dataframe_t\": dataframe_t, \"msg\":msg});\n\n\ncategorizedDataframe = categorizedDataframe_t[0].map((_, colIndex) => categorizedDataframe_t.map(row => row[colIndex]));\n\nmsg.payload.categorizedDataframe = categorizedDataframe;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 540,
        "wires": [
            [
                "8a307ca1.e69e3",
                "5db08302.ab82ac",
                "afcb8dcd.5148c"
            ]
        ]
    },
    {
        "id": "5db08302.ab82ac",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "average_class_size",
        "func": "k = msg.payload.k;\n//quasi_identifiers = msg.payload.quasi_identifiers;\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\nnode.warn({\"dataframe\": dataframe});\nnode.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\n\n// get the index of the equivalenc class column\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\n\n// transpose matrix for easier access\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\n\n// get number of unique equivalenceclasses and calculate with them \n// slice because first entry is name\naverageClassSize = (dataframe.length-1) / (new Set(dataframe_t[equivalenceClassColumnIndex].slice(1)).size * k)\n\nmsg = {payload: {}};\nmsg.payload.averageClassSize = averageClassSize;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "b69cba0d.89a368"
            ]
        ]
    },
    {
        "id": "8a307ca1.e69e3",
        "type": "function",
        "z": "44f2dba4.713184",
        "name": "generalized_information_loss",
        "func": "metric = 0;\nk = msg.payload.k;\nquasiIdentifiers = msg.payload.quasiIdentifiers;\nequivalenceClassColumn = msg.payload.equivalenceClassColumn;\ndataframe = msg.payload.categorizedDataframe\n\nnode.warn({\"msg\": msg});\nnode.warn({\"dataframe\": dataframe});\nnode.warn({\"quasiIdentifiers\": quasiIdentifiers});\nnode.warn({\"equivalenceClassColumn\": equivalenceClassColumn});\n\n// get the index of the equivalenc class column\nequivalenceClassColumnIndex = dataframe[0].indexOf(equivalenceClassColumn);\n// transpose matrix for easier access\ndataframe_t = dataframe[0].map((_, colIndex) => dataframe.map(row => row[colIndex]));\nnode.warn({\"dataframe_t\": dataframe_t});\n\ninformationLoss = 0;\n\neqClasses = new Set(dataframe_t[equivalenceClassColumnIndex].slice(1));\n\n\nvar ui = [];\nvar li = [];\n\n// get the min and max values per categorie. Skip the first as its the name in the transposed array.\nfor (var i = 0; i < dataframe_t.length; i++) { \n    ui[i] = Math.max.apply(Math, dataframe_t[i].slice(1));\n    li[i] = Math.min.apply(Math, dataframe_t[i].slice(1));\n    /*\n    if(dataframe_t[i][0] != \"age\") {\n        ui[i] += 1;\n        li[i] += 1;\n    }\n    */\n}\n\n//node.warn({\"ui\":ui});\n//node.warn({\"li\":li});\n\nfor (var eqClass of eqClasses) {\n\n    entriesWithEqClass = dataframe.filter(([age, job, pin, equivalenceClass]) => equivalenceClass == eqClass);\n    entriesWithEqClass_t = entriesWithEqClass[0].map((_, colIndex) => entriesWithEqClass.map(row => row[colIndex]));\n    \n    //node.warn({\"entriesWithEqClass_t\":entriesWithEqClass_t});\n    \n    var uij = [];\n    var lij = [];\n    \n    // the transposed array contain all values of one categorie in a line. \n    // dataframe_t.length == entriesWithEqClass_t.length because its transposed so its the number of the categories.\n    // dataframe_t.length - 1 because last categorie is equivalenceClass\n    for (var j = 0; j < dataframe_t.length - 1; j++) {\n        uij[j] = Math.max.apply(Math, entriesWithEqClass_t[j]);\n        lij[j] = Math.min.apply(Math, entriesWithEqClass_t[j]);\n        \n        informationLoss += ((uij[j] - lij[j]) / (ui[j] - li[j])) * (entriesWithEqClass.length)\n        //node.warn({\" Math.max(entriesWithEqClass_t[j])\":  Math.max.apply(Math, entriesWithEqClass_t[j])});\n    }\n}\n/*\nfor (var i = 0; i < dataframe.length; i++) {\n        for (var j = 0; j < dataframe[i].length) {\n            informationLoss += ((uij[j] - lij[j]) / (ui[j] - li[j]))\n            node.warn({\" Math.max(entriesWithEqClass_t[j])\":  Math.max.apply(Math, entriesWithEqClass_t[j])});\n        }\n    }\n*/\nfactor = 1 / (quasiIdentifiers.length * dataframe.length)\nresult = factor * informationLoss\n\nnode.warn({\"informationLoss\": informationLoss});\nnode.warn({\"generalized_information_loss\": result});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "b69cba0d.89a368"
            ]
        ]
    },
    {
        "id": "f960e58b.28ccf8",
        "type": "function",
        "z": "19a47153.1035df",
        "g": "e68402fe.4fdb1",
        "name": "remove disallowed columns / properties from messages",
        "func": "for (var [id, blacklistedProperty] of Object.entries(msg.suppressed_properties.suppressed_properties)) {\n    delete msg.payload[blacklistedProperty];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3fd6dcd1.eb1a14",
        "type": "comment",
        "z": "19a47153.1035df",
        "g": "e68402fe.4fdb1",
        "name": "Send json with array msg payload property \"disallowed_columns\" to the \"set flow variable\" node or modifie the previous node accordingly",
        "info": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "6f6c2af1.9f6e64",
        "type": "function",
        "z": "60904c4d.0104c4",
        "g": "cd180a4c.27e908",
        "name": "apply filterCondtion",
        "func": "filterCondition = msg.filterCondition;\n\nvar isInFilterCounter = 0;\nfor (var prop in filterCondition) {\n    var currentFilter = filterCondition[prop]\n    if(prop === \"rangeFilter\") {\n        if( msg.payload[currentFilter.columnName] >= currentFilter.minValue && msg.payload[currentFilter.columnName] <= currentFilter.maxValue) {\n            isInFilterCounter += 1;\n        }\n    }\n    if (prop === \"whitelistFilter\") {\n        if(currentFilter.whitelistValues.includes(msg.payload[currentFilter.columnName])) {\n            isInFilterCounter += 1;\n        }\n    }\n    if (prop === \"blacklistFilter\") {\n        if(!currentFilter.blacklistValues.includes(msg.payload[currentFilter.columnName])) {\n            isInFilterCounter += 1;\n        }\n    }\n}\n\n\nif (isInFilterCounter == Object.keys(filterCondition).length) {\n    return msg;\n}\nelse {\n    return;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "13e41266.74b74e",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 320,
        "wires": []
    },
    {
        "id": "ff6c83ab.d82a1",
        "type": "comment",
        "z": "f679c5ec.fb0428",
        "name": "todo: aggregation, performance benchmark",
        "info": "",
        "x": 200,
        "y": 460,
        "wires": []
    },
    {
        "id": "36a1d79b.ecb2c8",
        "type": "change",
        "z": "ed02ca62.53a888",
        "g": "75d75513.333d1c",
        "name": "append changeConditions to message",
        "rules": [
            {
                "t": "set",
                "p": "changeConditions",
                "pt": "msg",
                "to": "{\"changeStringEqual\":{\"sourceAttributeName\":\"car_modell\",\"changeAttributeName\":\"car_price\",\"change\":[{\"conditionStringEqual\":\"e-tron 55\",\"valueForChangeAttributeName\":84459},{\"conditionStringEqual\":\"e-tron 50\",\"valueForChangeAttributeName\":69100},{\"conditionStringEqual\":\"i3\",\"valueForChangeAttributeName\":39000},{\"conditionStringEqual\":\"Focus Electric\",\"valueForChangeAttributeName\":34900},{\"conditionStringEqual\":\"Mustang Mach-E\",\"valueForChangeAttributeName\":46900},{\"conditionStringEqual\":\"Ford F-150 Lightning electric pickup\",\"valueForChangeAttributeName\":43400},{\"conditionStringEqual\":\"Ioniq Electric\",\"valueForChangeAttributeName\":32363},{\"conditionStringEqual\":\"Kona Electric\",\"valueForChangeAttributeName\":41850},{\"conditionStringEqual\":\"I-Pace\",\"valueForChangeAttributeName\":77300},{\"conditionStringEqual\":\"B-Class Electric Drive\",\"valueForChangeAttributeName\":39151},{\"conditionStringEqual\":\"EQC\",\"valueForChangeAttributeName\":66068},{\"conditionStringEqual\":\"Peugeot iOn\",\"valueForChangeAttributeName\":21800},{\"conditionStringEqual\":\"e208\",\"valueForChangeAttributeName\":29682},{\"conditionStringEqual\":\"e2008\",\"valueForChangeAttributeName\":35250},{\"conditionStringEqual\":\"Fluence Z.E.\",\"valueForChangeAttributeName\":25690},{\"conditionStringEqual\":\"SM3 Z.E.\",\"valueForChangeAttributeName\":32000},{\"conditionStringEqual\":\"Zoe\",\"valueForChangeAttributeName\":29990},{\"conditionStringEqual\":\"Twizy\",\"valueForChangeAttributeName\":6950},{\"conditionStringEqual\":\"Kangoo Z.E.\",\"valueForChangeAttributeName\":20820},{\"conditionStringEqual\":\"Model S\",\"valueForChangeAttributeName\":86990},{\"conditionStringEqual\":\"Model X\",\"valueForChangeAttributeName\":95990},{\"conditionStringEqual\":\"Model 3\",\"valueForChangeAttributeName\":43560},{\"conditionStringEqual\":\"Model Y\",\"valueForChangeAttributeName\":58620},{\"conditionStringEqual\":\"e-up!\",\"valueForChangeAttributeName\":21421},{\"conditionStringEqual\":\"ID.4\",\"valueForChangeAttributeName\":37415},{\"conditionStringEqual\":\"ID.3\",\"valueForChangeAttributeName\":31960}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 740,
        "wires": [
            [
                "4439c462.3a2c8c"
            ]
        ]
    },
    {
        "id": "632b2112.8cbef",
        "type": "json",
        "z": "f679c5ec.fb0428",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 900,
        "wires": [
            [
                "eb697a48.ed8c28",
                "8b75bda1.b3a17",
                "27ab429d.f6275e",
                "f139e0c7.a58c8",
                "191a3997.1bd366"
            ]
        ]
    },
    {
        "id": "7b7bd8aa.432ac8",
        "type": "function",
        "z": "f679c5ec.fb0428",
        "name": "",
        "func": "msg.payload = msg.payload.replace(/'/g,'\"');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 900,
        "wires": [
            [
                "632b2112.8cbef"
            ]
        ]
    },
    {
        "id": "eb697a48.ed8c28",
        "type": "csv",
        "z": "f679c5ec.fb0428",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 800,
        "y": 1100,
        "wires": [
            [
                "85605a5e.e5e3b8"
            ]
        ]
    },
    {
        "id": "85605a5e.e5e3b8",
        "type": "file",
        "z": "f679c5ec.fb0428",
        "name": "",
        "filename": "anonymized_tuples.csv",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1190,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "cd504496.a36a98",
        "type": "ui_chart",
        "z": "f679c5ec.fb0428",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Delay in seconds",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1210,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8b75bda1.b3a17",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.delay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 880,
        "wires": [
            [
                "cd504496.a36a98",
                "879390c9.9afcc"
            ]
        ]
    },
    {
        "id": "7a11bd0a.384864",
        "type": "ui_button",
        "z": "60da4e27.9e901",
        "name": "",
        "group": "18d0f143.d267bf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Simulation and Castleguard",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "750a44e0.0e6acc"
            ]
        ]
    },
    {
        "id": "750a44e0.0e6acc",
        "type": "link out",
        "z": "60da4e27.9e901",
        "name": "",
        "links": [
            "e8dbc9d1.defd58",
            "f916c6f6.ace1e8"
        ],
        "x": 775,
        "y": 600,
        "wires": []
    },
    {
        "id": "e8dbc9d1.defd58",
        "type": "link in",
        "z": "f679c5ec.fb0428",
        "name": "",
        "links": [
            "750a44e0.0e6acc"
        ],
        "x": 215,
        "y": 1300,
        "wires": [
            [
                "f6fed640.1136b8",
                "aabba82d.226dd8"
            ]
        ]
    },
    {
        "id": "f916c6f6.ace1e8",
        "type": "link in",
        "z": "ed02ca62.53a888",
        "name": "",
        "links": [
            "750a44e0.0e6acc"
        ],
        "x": 135,
        "y": 960,
        "wires": [
            [
                "49c088f6.9ba0c8"
            ]
        ]
    },
    {
        "id": "27ab429d.f6275e",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.cluster",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 940,
        "wires": [
            [
                "c61ee392.484ab",
                "69af811a.f8918"
            ]
        ]
    },
    {
        "id": "c61ee392.484ab",
        "type": "function",
        "z": "f679c5ec.fb0428",
        "name": "count messages",
        "func": "messageCounter = flow.get('messageCounter')\nflow.set('messageCounter', messageCounter + 1);\n\nreturn {payload: flow.get('messageCounter')}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 940,
        "wires": [
            [
                "ea9baaab.93d988"
            ]
        ]
    },
    {
        "id": "ea9baaab.93d988",
        "type": "ui_text",
        "z": "f679c5ec.fb0428",
        "group": "18d0f143.d267bf",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "generated output",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1210,
        "y": 940,
        "wires": []
    },
    {
        "id": "aabba82d.226dd8",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "messageCounter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "69af811a.f8918",
        "type": "function",
        "z": "f679c5ec.fb0428",
        "name": "",
        "func": "clusterCounterSet = flow.get('clusterCounterSet') || new Set()\n\nclusterCounterSet.add(msg.payload);\n\nflow.set('clusterCounterSet', clusterCounterSet)\n\nreturn {payload: clusterCounterSet.size};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1000,
        "wires": [
            [
                "3f81e4c1.20ca6c"
            ]
        ]
    },
    {
        "id": "3f81e4c1.20ca6c",
        "type": "ui_text",
        "z": "f679c5ec.fb0428",
        "group": "18d0f143.d267bf",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "generated clusters",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1210,
        "y": 1000,
        "wires": []
    },
    {
        "id": "879390c9.9afcc",
        "type": "function",
        "z": "f679c5ec.fb0428",
        "name": "",
        "func": "maxDelay = flow.get('maxDelay') || 0\n\nif( maxDelay < msg.payload) {\n    flow.set('maxDelay', msg.payload)\n    return {payload: msg.payload};\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 800,
        "wires": [
            [
                "5f1b98d6.05e408"
            ]
        ]
    },
    {
        "id": "5f1b98d6.05e408",
        "type": "ui_text",
        "z": "f679c5ec.fb0428",
        "group": "18d0f143.d267bf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "max delay",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1230,
        "y": 800,
        "wires": []
    },
    {
        "id": "cfe57a06.b97168",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 780,
        "wires": []
    },
    {
        "id": "2d317e08.e1f652",
        "type": "change",
        "z": "ed02ca62.53a888",
        "g": "b1ae5997.ec6898",
        "name": "append changeConditions to message",
        "rules": [
            {
                "t": "set",
                "p": "changeConditions",
                "pt": "msg",
                "to": "{\"changeRangeBased\":{\"sourceAttributeName\":\"car_price\",\"changeAttributeName\":\"car_price_alt\",\"change\":[{\"conditionMin\":40000,\"conditionMax\":120000,\"valueForChangeAttributeName\":\"expensive\"},{\"conditionMin\":0,\"conditionMax\":39999,\"valueForChangeAttributeName\":\"cheap\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 920,
        "wires": [
            [
                "42403d84.0c7cd4"
            ]
        ]
    },
    {
        "id": "faddfcbc.ef93f",
        "type": "function",
        "z": "2bd5e7f7.0b5858",
        "g": "8f7d71c7.eca34",
        "name": "apply change conditions",
        "func": "changeCondition = msg.changeConditions;\n\n\n//node.warn({\"changeCondition\": changeCondition})\n\n\n \nfor (var currentChangeConditionType in changeCondition) {\n    \n    //node.warn({\"currentChangeConditionType\": currentChangeConditionType});\n    //node.warn({\"currentChangeConditionType == 'changeStringEqual'\": currentChangeConditionType == \"changeStringEqual\"});\n    //node.warn({\"currentChangeConditionType == 'changeRangeBased'\": currentChangeConditionType == \"changeRangeBased\"});\n    //node.warn({\"changeCondition[currentChangeConditionType]\": changeCondition[currentChangeConditionType]});\n    \n    for (var change of changeCondition[currentChangeConditionType].change) {\n        currentChangeCondition = changeCondition[currentChangeConditionType]\n        if(currentChangeConditionType == \"changeStringEqual\") {\n            // node.warn({\"change.conditionStringEqual\": change.conditionStringEqual});\n            // node.warn({\"msg.payload[currentChangeCondition.sourceAttributeName]\": msg.payload[currentChangeCondition.sourceAttributeName]});\n            if(msg.payload[currentChangeCondition.sourceAttributeName] == change.conditionStringEqual) {\n                msg.payload[currentChangeCondition.changeAttributeName] = change.valueForChangeAttributeName;\n                //node.warn({\"change made\": change})\n                //node.warn(msg.payload)\n                break;\n            }\n        }\n        if(currentChangeConditionType == \"changeRangeBased\") {\n            if(msg.payload[currentChangeCondition.sourceAttributeName] > change.conditionMin && \n               msg.payload[currentChangeCondition.sourceAttributeName] <= change.conditionMax) {\n                msg.payload[currentChangeCondition.changeAttributeName] = change.valueForChangeAttributeName;\n                //node.warn({\"change made\": change})\n                //node.warn(msg.payload)\n                break;\n            }\n        }\n    }\n} \n\nreturn msg;\n\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4439c462.3a2c8c",
        "type": "subflow:2bd5e7f7.0b5858",
        "z": "ed02ca62.53a888",
        "g": "75d75513.333d1c",
        "name": "change car prices based on car models ",
        "env": [],
        "x": 1670,
        "y": 740,
        "wires": [
            [
                "2d317e08.e1f652"
            ]
        ]
    },
    {
        "id": "42403d84.0c7cd4",
        "type": "subflow:2bd5e7f7.0b5858",
        "z": "ed02ca62.53a888",
        "g": "b1ae5997.ec6898",
        "name": "change car price class based on car price range",
        "env": [],
        "x": 1680,
        "y": 920,
        "wires": [
            [
                "c26eb7cb.5e5418"
            ]
        ]
    },
    {
        "id": "67337a86.61f764",
        "type": "subflow:60904c4d.0104c4",
        "z": "f679c5ec.fb0428",
        "name": "",
        "env": [],
        "x": 1240,
        "y": 480,
        "wires": [
            [
                "67429175.6c3cf"
            ]
        ]
    },
    {
        "id": "f139e0c7.a58c8",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "append filterCondition to message",
        "rules": [
            {
                "t": "set",
                "p": "filterCondition",
                "pt": "msg",
                "to": "{\"rangeFilter\":{\"columnName\":\"Energy__kWh_\",\"minValue\":10,\"maxValue\":21}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 480,
        "wires": [
            [
                "67337a86.61f764"
            ]
        ]
    },
    {
        "id": "d4b8115.09962f",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "append filterCondition to message",
        "rules": [
            {
                "t": "set",
                "p": "filterCondition",
                "pt": "msg",
                "to": "{\"rangeFilter\":{\"columnName\":\"Energy__kWh_\",\"minValue\":10,\"maxValue\":21},\"whitelistFilter\":{\"columnName\":\"ObjectId\",\"whitelistValues\":[10459,22794,20286,872]},\"blacklistFilter\":{\"columnName\":\"ObjectId\",\"blacklistValues\":[22794]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "735d2a1a.515c14",
        "type": "subflow:19a47153.1035df",
        "z": "f679c5ec.fb0428",
        "name": "",
        "env": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "13e41266.74b74e"
            ]
        ]
    },
    {
        "id": "191a3997.1bd366",
        "type": "change",
        "z": "f679c5ec.fb0428",
        "name": "append suppressed properties to message",
        "rules": [
            {
                "t": "set",
                "p": "suppressed_properties",
                "pt": "msg",
                "to": "{\"suppressed_properties\":[\"ObjectId\",\"Address\",\"City\"]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 320,
        "wires": [
            [
                "735d2a1a.515c14"
            ]
        ]
    },
    {
        "id": "67429175.6c3cf",
        "type": "debug",
        "z": "f679c5ec.fb0428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 480,
        "wires": []
    }
]